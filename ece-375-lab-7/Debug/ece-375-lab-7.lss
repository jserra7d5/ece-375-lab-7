
AVRASM ver. 2.2.7  C:\Users\redst\Desktop\Classes\ECE 375\ece-375-lab-7\ece-375-lab-7\Joseph_Serra_and_Darren_Mai_sourcecode.asm Thu Mar 13 19:10:19 2025

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m32u4def.inc'
C:\Users\redst\Desktop\Classes\ECE 375\ece-375-lab-7\ece-375-lab-7\Joseph_Serra_and_Darren_Mai_sourcecode.asm(17): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m32U4def.inc'
C:\Users\redst\Desktop\Classes\ECE 375\ece-375-lab-7\ece-375-lab-7\Joseph_Serra_and_Darren_Mai_sourcecode.asm(733): Including file 'C:\Users\redst\Desktop\Classes\ECE 375\ece-375-lab-7\ece-375-lab-7\LCDDriver.asm'
C:\Users\redst\Desktop\Classes\ECE 375\ece-375-lab-7\ece-375-lab-7\LCDDriver.asm(31): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m32U4def.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m32u4def.inc'
C:\Users\redst\Desktop\Classes\ECE 375\ece-375-lab-7\ece-375-lab-7\Joseph_Serra_and_Darren_Mai_sourcecode.asm(17): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m32U4def.inc'
C:\Users\redst\Desktop\Classes\ECE 375\ece-375-lab-7\ece-375-lab-7\Joseph_Serra_and_Darren_Mai_sourcecode.asm(733): Including file 'C:\Users\redst\Desktop\Classes\ECE 375\ece-375-lab-7\ece-375-lab-7\LCDDriver.asm'
C:\Users\redst\Desktop\Classes\ECE 375\ece-375-lab-7\ece-375-lab-7\LCDDriver.asm(31): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m32U4def.inc'
                                 
                                 
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32U4.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32U4def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32U4
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32U4
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32U4DEF_INC_
                                 #define _M32U4DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega32U4
                                 #pragma AVRPART ADMIN PART_NAME ATmega32U4
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x87
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	PLLCSR	= 0x29
                                 .equ	PLLFRQ	= 0x32
                                 .equ	UEINT	= 0xf4	; MEMORY MAPPED
                                 .equ	UEBCHX	= 0xf3	; MEMORY MAPPED
                                 .equ	UEBCLX	= 0xf2	; MEMORY MAPPED
                                 .equ	UEDATX	= 0xf1	; MEMORY MAPPED
                                 .equ	UEIENX	= 0xf0	; MEMORY MAPPED
                                 .equ	UESTA1X	= 0xef	; MEMORY MAPPED
                                 .equ	UESTA0X	= 0xee	; MEMORY MAPPED
                                 .equ	UECFG1X	= 0xed	; MEMORY MAPPED
                                 .equ	UECFG0X	= 0xec	; MEMORY MAPPED
                                 .equ	UECONX	= 0xeb	; MEMORY MAPPED
                                 .equ	UERST	= 0xea	; MEMORY MAPPED
                                 .equ	UENUM	= 0xe9	; MEMORY MAPPED
                                 .equ	UEINTX	= 0xe8	; MEMORY MAPPED
                                 .equ	UDMFN	= 0xe6	; MEMORY MAPPED
                                 .equ	UDFNUMH	= 0xe5	; MEMORY MAPPED
                                 .equ	UDFNUML	= 0xe4	; MEMORY MAPPED
                                 .equ	UDADDR	= 0xe3	; MEMORY MAPPED
                                 .equ	UDIEN	= 0xe2	; MEMORY MAPPED
                                 .equ	UDINT	= 0xe1	; MEMORY MAPPED
                                 .equ	UDCON	= 0xe0	; MEMORY MAPPED
                                 .equ	USBINT	= 0xda	; MEMORY MAPPED
                                 .equ	USBSTA	= 0xd9	; MEMORY MAPPED
                                 .equ	USBCON	= 0xd8	; MEMORY MAPPED
                                 .equ	UHWCON	= 0xd7	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ 	TWAMR		= 0xbd	;
                                 .equ  TWCR		= 0xbc	;
                                 .equ 	TWDR		= 0xbb	;
                                 .equ 	TWAR		= 0xba 	;
                                 .equ 	TWSR		= 0xb9	;
                                 .equ 	TWBR		= 0xb8	;
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	RCCTRL	= 0x67	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	DT4	= 0xd4	; MEMORY MAPPED
                                 .equ	OCR4D	= 0xd2	; MEMORY MAPPED
                                 .equ	OCR4C	= 0xd1	; MEMORY MAPPED
                                 .equ	OCR4B	= 0xd0	; MEMORY MAPPED
                                 .equ	OCR4A	= 0xcf	; MEMORY MAPPED
                                 .equ	TCCR4E	= 0xc4	; MEMORY MAPPED
                                 .equ	TCCR4D	= 0xc3	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xc2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xc1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xc0	; MEMORY MAPPED
                                 .equ	TC4H	= 0xbf	; MEMORY MAPPED
                                 .equ	TCNT4	= 0xbe	; MEMORY MAPPED
                                 .equ	CLKSEL1	= 0xc6	; MEMORY MAPPED
                                 .equ	CLKSEL0	= 0xc5	; MEMORY MAPPED
                                 .equ	CLKSTA	= 0xc7	; MEMORY MAPPED
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; DT4 - Timer/Counter 4 Dead Time Value
                                 .equ	DT4L0	= 0	; Timer/Counter 4 Dead Time Value Bit 0
                                 .equ	DT4L1	= 1	; Timer/Counter 4 Dead Time Value Bit 1
                                 .equ	DT4L2	= 2	; Timer/Counter 4 Dead Time Value Bit 2
                                 .equ	DT4L3	= 3	; Timer/Counter 4 Dead Time Value Bit 3
                                 .equ	DT4L4	= 4	; Timer/Counter 4 Dead Time Value Bit 4
                                 .equ	DT4L5	= 5	; Timer/Counter 4 Dead Time Value Bit 5
                                 .equ	DT4L6	= 6	; Timer/Counter 4 Dead Time Value Bit 6
                                 .equ	DT4L7	= 7	; Timer/Counter 4 Dead Time Value Bit 7
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 2	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4B	= 5	; Output Compare Flag 4B
                                 .equ	OCF4A	= 6	; Output Compare Flag 4A
                                 .equ	OCF4D	= 7	; Output Compare Flag 4D
                                 
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 2	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4B	= 5	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4A	= 6	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4D	= 7	; Timer/Counter4 Output Compare D Match Interrupt Enable
                                 
                                 ; OCR4D - Timer/Counter4 Output Compare Register D
                                 .equ	OCR4D0	= 0	; Timer/Counter4 Output Compare Register Low Byte bit 0
                                 .equ	OCR4D1	= 1	; Timer/Counter4 Output Compare Register Low Byte bit 1
                                 .equ	OCR4D2	= 2	; Timer/Counter4 Output Compare Register Low Byte bit 2
                                 .equ	OCR4D3	= 3	; Timer/Counter4 Output Compare Register Low Byte bit 3
                                 .equ	OCR4D4	= 4	; Timer/Counter4 Output Compare Register Low Byte bit 4
                                 .equ	OCR4D5	= 5	; Timer/Counter4 Output Compare Register Low Byte bit 5
                                 .equ	OCR4D6	= 6	; Timer/Counter4 Output Compare Register Low Byte bit 6
                                 .equ	OCR4D7	= 7	; Timer/Counter4 Output Compare Register Low Byte bit 7
                                 
                                 ; OCR4C - Timer/Counter4 Output Compare Register C
                                 .equ	OCR4C0	= 0	; Timer/Counter4 Output Compare Register bit 0
                                 .equ	OCR4C1	= 1	; Timer/Counter4 Output Compare Register bit 1
                                 .equ	OCR4C2	= 2	; Timer/Counter4 Output Compare Register bit 2
                                 .equ	OCR4C3	= 3	; Timer/Counter4 Output Compare Register bit 3
                                 .equ	OCR4C4	= 4	; Timer/Counter4 Output Compare Register bit 4
                                 .equ	OCR4C5	= 5	; Timer/Counter4 Output Compare Register bit 5
                                 .equ	OCR4C6	= 6	; Timer/Counter4 Output Compare Register 6
                                 .equ	OCR4C7	= 7	; Timer/Counter4 Output Compare Register bit 7
                                 
                                 ; OCR4B - Timer/Counter4 Output Compare Register B
                                 .equ	OCR4B0	= 0	; Timer/Counter4 Output Compare Register bit 0
                                 .equ	OCR4B1	= 1	; Timer/Counter4 Output Compare Register bit 1
                                 .equ	OCR4B2	= 2	; Timer/Counter4 Output Compare Register bit 2
                                 .equ	OCR4B3	= 3	; Timer/Counter4 Output Compare Register bit 3
                                 .equ	OCR4B4	= 4	; Timer/Counter4 Output Compare Register bit 4
                                 .equ	OCR4B5	= 5	; Timer/Counter4 Output Compare Register bit 5
                                 .equ	OCR4B6	= 6	; Timer/Counter4 Output Compare Register bit 6
                                 .equ	OCR4B7	= 7	; Timer/Counter4 Output Compare Register bit 7
                                 
                                 ; OCR4A - Timer/Counter4 Output Compare Register A
                                 .equ	OCR4A0	= 0	; Timer/Counter4 Output Compare Register Bit 0
                                 .equ	OCR4A1	= 1	; Timer/Counter4 Output Compare Register Bit 1
                                 .equ	OCR4A2	= 2	; Timer/Counter4 Output Compare Register Low Byte Bit 2
                                 .equ	OCR4A3	= 3	; Timer/Counter4 Output Compare Register Low Byte Bit 3
                                 .equ	OCR4A4	= 4	; Timer/Counter4 Output Compare Register Bit 4
                                 .equ	OCR4A5	= 5	; Timer/Counter4 Output Compare Register Bit 5
                                 .equ	OCR4A6	= 6	; Timer/Counter4 Output Compare Register Bit 6
                                 .equ	OCR4A7	= 7	; Timer/Counter4 Output Compare Register Bit 7
                                 
                                 ; TC4H - Timer/Counter4
                                 .equ	TC48	= 0	; Timer/Counter4 bit 8
                                 .equ	TC49	= 1	; Timer/Counter4 bit 9
                                 .equ	TC410	= 2	; Timer/Counter4 bit 10
                                 
                                 ; TCNT4 - Timer/Counter4 Low Bytes
                                 .equ	TC40	= 0	; Timer/Counter4 bit 0
                                 .equ	TC41	= 1	; Timer/Counter4 bit 1
                                 .equ	TC42	= 2	; Timer/Counter4 bit 2
                                 .equ	TC43	= 3	; Timer/Counter4  bit 3
                                 .equ	TC44	= 4	; Timer/Counter4 bit 4
                                 .equ	TC45	= 5	; Timer/Counter4 bit 5
                                 .equ	TC46	= 6	; Timer/Counter4 bit 6
                                 .equ	TC47	= 7	; Timer/Counter4 bit 7
                                 
                                 ; TCCR4E - Timer/Counter 4 Control Register E
                                 .equ	OC4OE0	= 0	; Output Compare Override Enable bit
                                 .equ	OC4OE1	= 1	; Output Compare Override Enable bit
                                 .equ	OC4OE2	= 2	; Output Compare Override Enable bit
                                 .equ	OC4OE3	= 3	; Output Compare Override Enable bit
                                 .equ	OC4OE4	= 4	; Output Compare Override Enable bit
                                 .equ	OC4OE5	= 5	; Output Compare Override Enable bit
                                 .equ	ENHC4	= 6	; Enhanced Compare/PWM Mode
                                 .equ	TLOCK4	= 7	; Register Update Lock
                                 
                                 ; TCCR4D - Timer/Counter 4 Control Register D
                                 .equ	WGM40	= 0	; Waveform Generation Mode bits
                                 .equ	WGM41	= 1	; Waveform Generation Mode bits
                                 .equ	FPF4	= 2	; Fault Protection Interrupt Flag
                                 .equ	FPAC4	= 3	; Fault Protection Analog Comparator Enable
                                 .equ	FPES4	= 4	; Fault Protection Edge Select
                                 .equ	FPNC4	= 5	; Fault Protection Noise Canceler
                                 .equ	FPEN4	= 6	; Fault Protection Mode Enable
                                 .equ	FPIE4	= 7	; Fault Protection Interrupt Enable
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	PWM4D	= 0	; Pulse Width Modulator D Enable
                                 .equ	FOC4D	= 1	; Force Output Compare Match 4D
                                 .equ	COM4D0	= 2	; Comparator D Output Mode
                                 .equ	COM4D1	= 3	; Comparator D Output Mode
                                 .equ	COM4B0S	= 4	; Comparator B Output Mode
                                 .equ	COM4B1S	= 5	; Comparator B Output Mode
                                 .equ	COM4A0S	= 6	; Comparator A Output Mode
                                 .equ	COM4A1S	= 7	; Comparator A Output Mode
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Clock Select Bit 0
                                 .equ	CS41	= 1	; Clock Select Bit 1
                                 .equ	CS42	= 2	; Clock Select Bit 2
                                 .equ	CS43	= 3	; Clock Select Bit 3
                                 .equ	DTPS40	= 4	; Dead Time Prescaler Bit 0
                                 .equ	DTPS41	= 5	; Dead Time Prescaler Bit 1
                                 .equ	PSR4	= 6	; Prescaler Reset Timer/Counter 4
                                 .equ	PWM4X	= 7	; PWM Inversion Mode
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	PWM4B	= 0	; 
                                 .equ	PWM4A	= 1	; 
                                 .equ	FOC4B	= 2	; Force Output Compare Match 4B
                                 .equ	FOC4A	= 3	; Force Output Compare Match 4A
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE6	= 6	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE6	= 6	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source 2
                                 .equ	ADTS3	= 4	; ADC Auto Trigger Source 3
                                 .equ	MUX5	= 5	; Analog Channel and Gain Selection Bits
                                 .equ	ADHSM	= 7	; ADC High Speed Mode
                                 
                                 ; DIDR0 - Digital Input Disable Register 1
                                 .equ	ADC0D	= 0	; ADC0 Digital input Disable
                                 .equ	ADC1D	= 1	; ADC1 Digital input Disable
                                 .equ	ADC2D	= 2	; ADC2 Digital input Disable
                                 .equ	ADC3D	= 3	; ADC3 Digital input Disable
                                 .equ	ADC4D	= 4	; ADC4 Digital input Disable
                                 .equ	ADC5D	= 5	; ADC5 Digital input Disable
                                 .equ	ADC6D	= 6	; ADC6 Digital input Disable
                                 .equ	ADC7D	= 7	; ADC7 Digital input Disable
                                 
                                 ; DIDR2 - Digital Input Disable Register 1
                                 .equ	ADC8D	= 0	; ADC8 Digital input Disable
                                 .equ	ADC9D	= 1	; ADC9 Digital input Disable
                                 .equ	ADC10D	= 2	; ADC10 Digital input Disable
                                 .equ	ADC11D	= 3	; ADC11 Digital input Disable
                                 .equ	ADC12D	= 4	; ADC12 Digital input Disable
                                 .equ	ADC13D	= 5	; ADC13 Digital input Disable
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - 
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; RCCTRL - Oscillator Control Register
                                 .equ	RCFREQ	= 0	; 
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRUSB	= 7	; Power Reduction USB
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 ; CLKSTA - 
                                 .equ	EXTON	= 0	; 
                                 .equ	RCON	= 1	; 
                                 
                                 ; CLKSEL0 - 
                                 .equ	CLKS	= 0	; 
                                 .equ	EXTE	= 2	; 
                                 .equ	RCE	= 3	; 
                                 .equ	EXSUT0	= 4	; 
                                 .equ	EXSUT1	= 5	; 
                                 .equ	RCSUT0	= 6	; 
                                 .equ	RCSUT1	= 7	; 
                                 
                                 ; CLKSEL1 - 
                                 .equ	EXCKSEL0	= 0	; 
                                 .equ	EXCKSEL1	= 1	; 
                                 .equ	EXCKSEL2	= 2	; 
                                 .equ	EXCKSEL3	= 3	; 
                                 .equ	RCCKSEL0	= 4	; 
                                 .equ	RCCKSEL1	= 5	; 
                                 .equ	RCCKSEL2	= 6	; 
                                 .equ	RCCKSEL3	= 7	; 
                                 
                                 
                                 ; ***** PLL **************************
                                 ; PLLCSR - PLL Status and Control register
                                 .equ	PLOCK	= 0	; PLL Lock Status Bit
                                 .equ	PLLE	= 1	; PLL Enable Bit
                                 .equ	PINDIV	= 4	; PLL prescaler Bit 2
                                 
                                 ; PLLFRQ - PLL Frequency Control Register
                                 .equ	PDIV0	= 0	; 
                                 .equ	PDIV1	= 1	; 
                                 .equ	PDIV2	= 2	; 
                                 .equ	PDIV3	= 3	; 
                                 .equ	PLLTM0	= 4	; 
                                 .equ	PLLTM1	= 5	; 
                                 .equ	PLLUSB	= 6	; 
                                 .equ	PINMUX	= 7	; 
                                 
                                 
                                 ; ***** USB_DEVICE *******************
                                 ; USBCON - USB General Control Register
                                 .equ	VBUSTE	= 0	; 
                                 .equ	OTGPADE	= 4	; 
                                 .equ	FRZCLK	= 5	; 
                                 .equ	USBE	= 7	; 
                                 
                                 ; UDCON - 
                                 .equ	DETACH	= 0	; 
                                 .equ	RMWKUP	= 1	; 
                                 .equ	LSM	= 2	; USB low speed mode
                                 .equ	RSTCPU	= 3	; 
                                 
                                 ; UDINT - 
                                 .equ	SUSPI	= 0	; 
                                 .equ	SOFI	= 2	; 
                                 .equ	EORSTI	= 3	; 
                                 .equ	WAKEUPI	= 4	; 
                                 .equ	EORSMI	= 5	; 
                                 .equ	UPRSMI	= 6	; 
                                 
                                 ; UDIEN - 
                                 .equ	SUSPE	= 0	; 
                                 .equ	SOFE	= 2	; 
                                 .equ	EORSTE	= 3	; 
                                 .equ	WAKEUPE	= 4	; 
                                 .equ	EORSME	= 5	; 
                                 .equ	UPRSME	= 6	; 
                                 
                                 ; UDADDR - 
                                 .equ	UADD0	= 0	; 
                                 .equ	UADD1	= 1	; 
                                 .equ	UADD2	= 2	; 
                                 .equ	UADD3	= 3	; 
                                 .equ	UADD4	= 4	; 
                                 .equ	UADD5	= 5	; 
                                 .equ	UADD6	= 6	; 
                                 .equ	ADDEN	= 7	; 
                                 
                                 ; UDFNUML - 
                                 .equ	FNUM0	= 0	; 
                                 .equ	FNUM1	= 1	; 
                                 .equ	FNUM2	= 2	; 
                                 .equ	FNUM3	= 3	; 
                                 .equ	FNUM4	= 4	; 
                                 .equ	FNUM5	= 5	; 
                                 .equ	FNUM6	= 6	; 
                                 .equ	FNUM7	= 7	; 
                                 
                                 ; UDFNUMH - 
                                 .equ	FNUM8	= 0	; 
                                 .equ	FNUM9	= 1	; 
                                 .equ	FNUM10	= 2	; 
                                 
                                 ; UDMFN - 
                                 .equ	FNCERR	= 4	; 
                                 
                                 ; UEINTX - 
                                 .equ	TXINI	= 0	; 
                                 .equ	STALLEDI	= 1	; 
                                 .equ	RXOUTI	= 2	; 
                                 .equ	RXSTPI	= 3	; 
                                 .equ	NAKOUTI	= 4	; 
                                 .equ	RWAL	= 5	; 
                                 .equ	NAKINI	= 6	; 
                                 .equ	FIFOCON	= 7	; 
                                 
                                 ; UENUM - 
                                 .equ	UENUM_0	= 0	; 
                                 .equ	UENUM_1	= 1	; 
                                 .equ	UENUM_2	= 2	; 
                                 
                                 ; UERST - 
                                 .equ	EPRST0	= 0	; 
                                 .equ	EPRST1	= 1	; 
                                 .equ	EPRST2	= 2	; 
                                 .equ	EPRST3	= 3	; 
                                 .equ	EPRST4	= 4	; 
                                 .equ	EPRST5	= 5	; 
                                 .equ	EPRST6	= 6	; 
                                 
                                 ; UECONX - 
                                 .equ	EPEN	= 0	; 
                                 .equ	RSTDT	= 3	; 
                                 .equ	STALLRQC	= 4	; 
                                 .equ	STALLRQ	= 5	; 
                                 
                                 ; UECFG0X - 
                                 .equ	EPDIR	= 0	; 
                                 .equ	EPTYPE0	= 6	; 
                                 .equ	EPTYPE1	= 7	; 
                                 
                                 ; UECFG1X - 
                                 .equ	ALLOC	= 1	; 
                                 .equ	EPBK0	= 2	; 
                                 .equ	EPBK1	= 3	; 
                                 .equ	EPSIZE0	= 4	; 
                                 .equ	EPSIZE1	= 5	; 
                                 .equ	EPSIZE2	= 6	; 
                                 
                                 ; UESTA0X - 
                                 .equ	NBUSYBK0	= 0	; 
                                 .equ	NBUSYBK1	= 1	; 
                                 .equ	DTSEQ0	= 2	; 
                                 .equ	DTSEQ1	= 3	; 
                                 .equ	UNDERFI	= 5	; 
                                 .equ	OVERFI	= 6	; 
                                 .equ	CFGOK	= 7	; 
                                 
                                 ; UESTA1X - 
                                 .equ	CURRBK0	= 0	; 
                                 .equ	CURRBK1	= 1	; 
                                 .equ	CTRLDIR	= 2	; 
                                 
                                 ; UEIENX - 
                                 .equ	TXINE	= 0	; 
                                 .equ	STALLEDE	= 1	; 
                                 .equ	RXOUTE	= 2	; 
                                 .equ	RXSTPE	= 3	; 
                                 .equ	NAKOUTE	= 4	; 
                                 .equ	NAKINE	= 6	; 
                                 .equ	FLERRE	= 7	; 
                                 
                                 ; UEDATX - 
                                 .equ	DAT0	= 0	; 
                                 .equ	DAT1	= 1	; 
                                 .equ	DAT2	= 2	; 
                                 .equ	DAT3	= 3	; 
                                 .equ	DAT4	= 4	; 
                                 .equ	DAT5	= 5	; 
                                 .equ	DAT6	= 6	; 
                                 .equ	DAT7	= 7	; 
                                 
                                 ; UEBCLX - 
                                 .equ	BYCT0	= 0	; 
                                 .equ	BYCT1	= 1	; 
                                 .equ	BYCT2	= 2	; 
                                 .equ	BYCT3	= 3	; 
                                 .equ	BYCT4	= 4	; 
                                 .equ	BYCT5	= 5	; 
                                 .equ	BYCT6	= 6	; 
                                 .equ	BYCT7	= 7	; 
                                 
                                 ; UEINT - 
                                 .equ	EPINT0	= 0	; 
                                 .equ	EPINT1	= 1	; 
                                 .equ	EPINT2	= 2	; 
                                 .equ	EPINT3	= 3	; 
                                 .equ	EPINT4	= 4	; 
                                 .equ	EPINT5	= 5	; 
                                 .equ	EPINT6	= 6	; 
                                 
                                 ; USBINT - 
                                 .equ	VBUSTI	= 0	; 
                                 
                                 ; USBSTA - 
                                 .equ	VBUS	= 0	; 
                                 .equ	SPEED	= 3	; 
                                 
                                 ; USBCON - USB General Control Register
                                 ;.equ	VBUSTE	= 0	; 
                                 ;.equ	OTGPADE	= 4	; 
                                 ;.equ	FRZCLK	= 5	; 
                                 ;.equ	USBE	= 7	; 
                                 
                                 ; UHWCON - 
                                 .equ	UVREGE	= 0	; 
                                 
                                 ; TWCR - Two-Wire Interface Control
                                 .equ		TWIE	= 0	;
                                 .equ 		TWEN	= 2	;
                                 .equ 		TWWC	= 3	;
                                 .equ 		TWSTO	= 4	;
                                 .equ 		TWSTA	= 5	;
                                 .equ 		TWEA	= 6	;
                                 .equ 		TWINT	= 7	;
                                 
                                 ; TWSR - Two-Wire Status
                                 .equ 		TWPS0	= 0	;
                                 .equ 		TWPS1	= 1	;
                                 
                                 ; TWAR
                                 .equ 		TWGCE	= 0	;
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Oscillator options
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 .equ	HWBE	= 3	; Hardware Boot Enable
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2560
                                 .equ	RAMEND	= 0x0aff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2560
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	Reserved1addr	= 0x000a	; Reserved1
                                 .equ	Reserved2addr	= 0x000c	; Reserved2
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	Reserved3addr	= 0x0010	; Reserved3
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	USB_GENaddr	= 0x0014	; USB General Interrupt Request
                                 .equ	USB_COMaddr	= 0x0016	; USB Endpoint/Pipe Interrupt Communication Request
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	Reserved4addr	= 0x001a	; Reserved4
                                 .equ	Reserved5addr	= 0x001c	; Reserved5
                                 .equ	Reserved6addr	= 0x001e	; Reserved6
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC1addr	= 0x0032	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x0034	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x0036	; USART1, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	TWIaddr	= 0x0048	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x004a	; Store Program Memory Read
                                 .equ	OC4Aaddr	= 0x004c	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x004e	; Timer/Counter4 Compare Match B
                                 .equ	OC4Daddr	= 0x0050	; Timer/Counter4 Compare Match D
                                 .equ	OVF4addr	= 0x0052	; Timer/Counter4 Overflow
                                 .equ	TIMER4_FPFaddr	= 0x0054	; Timer/Counter4 Fault Protection Interrupt
                                 
                                 .equ	INT_VECTORS_SIZE	= 86	; size in words
                                 
                                 #endif  /* _M32U4DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;***********************************************************
                                 ;*
                                 ;*	This is the TRANSMIT skeleton file for Lab 7 of ECE 375
                                 ;*
                                 ;*  	Rock Paper Scissors
                                 ;* 	Requirement:
                                 ;* 	1. USART1 communication
                                 ;* 	2. Timer/counter1 Normal mode to create a 1.5-sec delay
                                 ;***********************************************************
                                 ;*
                                 ;*	 Author: Joseph Serra and Darren Mai
                                 ;*	   Date: 3/12/2025
                                 ;*
                                 ;***********************************************************
                                 
                                 .include "m32U4def.inc"         ; Include definition file
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32U4.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32U4def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32U4
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32U4
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32U4DEF_INC_
                                 #endif  /* _M32U4DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;***********************************************************
                                 ;*  Internal Register Definitions and Constants
                                 ;***********************************************************
                                 .def    mpr = r16               ; Multi-Purpose Register
                                 .def	buffer = r17
                                 .def	game_state = r19
                                 .def	mpr2 = r23
                                 
                                 ; Use this signal code between two boards for their game ready
                                 .equ    SendReady = 0b11111111
                                 .equ    SendRock = 0b00000000
                                 .equ    SendPaper = 0b00000001
                                 .equ    SendScissors = 0b00000010
                                 
                                 .equ	DEBOUNCE_PRELOAD = 64364   ; Preload value for ~150ms debounce delay
                                 
                                 .equ	Button_4 = 0 ; jump PD4 to PD0
                                 .equ    Button_7 = 1 ; jump PD7 to PD3
                                 
                                 ;***********************************************************
                                 ;*  Start of Code Segment
                                 ;***********************************************************
                                 .cseg                           ; Beginning of code segment
                                 
                                 ;***********************************************************
                                 ;*  Interrupt Vectors
                                 ;***********************************************************
                                 .org    $0000                   ; Beginning of IVs
000000 c055                      	    rjmp    INIT            	; Reset interrupt
                                 
                                 .org	$0002
000002 d149                      		rcall PD4_ISR
000003 9518                      		reti
                                 
                                 .org	$0004
000004 d196                      		rcall PD7_ISR
000005 9518                      		reti
                                 
                                 ;.org	$0028 ; T/C interrupt 1
                                 		;rjmp TIMER1_OVF
                                 
                                 .org	$0032
000032 d0ca                      		rcall USART_Recieve
000033 9518                      		reti
                                 
                                 .org	$0046
000046 d160                      		rcall Timer3_OVF_ISR
000047 9518                      		reti
                                 
                                 .org    $0056                   ; End of Interrupt Vectors
                                 
                                 ;***********************************************************
                                 ;*  Program Initialization
                                 ;***********************************************************
                                 INIT:
                                 	; initialize stack pointer
000056 ef0f                      	ldi	mpr, low(RAMEND)
000057 bf0d                      	out	SPL, mpr
000058 e00a                      	ldi	mpr, high(RAMEND)
000059 bf0e                      	out SPH, mpr
                                 
                                 	; set game state readying up
                                 	;clr game_state
00005a 2777                      	clr mpr2
                                 
                                 	; Initialize Port B for output
00005b ef0f                      	ldi	mpr, $FF		; Set Port B Data Direction Register
00005c b904                      	out	DDRB, mpr		; for output
00005d e000                      	ldi	mpr, $00		; Initialize Port B Data Register
00005e b905                      	out	PORTB, mpr		; so all Port B outputs are low
                                 
                                 	; initialize port D for input
00005f e000                      	ldi	mpr, $00
000060 b90a                      	out DDRD, mpr
000061 ef0f                      	ldi mpr, $FF
000062 b90b                      	out	PORTD, mpr
                                 
                                 	; initialize button interrupts
000063 e00a                      	ldi mpr, 0b00001010
000064 9300 0069                 	sts EICRA, mpr
                                 
000066 e003                      	ldi mpr, (1<<Button_4 | 1<<Button_7)
000067 bb0d                      	out EIMSK, mpr
                                 
                                 	; USART1 Init
                                 
                                 	; Set baudrate at 2400
000068 e001                      	ldi mpr, high(416)
000069 9300 00cd                 	sts UBRR1H, mpr
00006b ea00                      	ldi mpr, low(416)
00006c 9300 00cc                 	sts UBRR1L, mpr
                                 
00006e e002                      	ldi		mpr, (1<<U2X1)
00006f 9300 00c8                 	sts		UCSR1A, mpr
                                 
                                 	; Enable both transmitter and receiver, and receive interrupt
000071 e908                      	ldi mpr, (1<<RXEN1 | 1<<TXEN1 | 1<<RXCIE1)
000072 9300 00c9                 	sts UCSR1B, mpr
                                 
                                 	; Set frame format: 8 data, 2 stop bits, asynchronous
000074 e00e                      	ldi mpr, (1<<USBS1 | 1<<UCSZ11 | 1<<UCSZ10)
000075 9300 00ca                 	sts UCSR1C, mpr
                                 
                                 	; Clear our flag variables
                                     
                                 	;ldi game_state, 1
                                 
000077 e000                      	ldi		mpr, 0
000078 bd04                      	out		TCCR0A, mpr
000079 e005                      	ldi		mpr, 0b00000101
00007a bd05                      	out		TCCR0B, mpr
                                 
                                 	; copy all of our strings over and point Y at our LCD writes
00007b d14c                      	rcall COPY_ALL_STRINGS
00007c d1f8                      	rcall LCDInit
00007d d236                      	rcall LCDClr
00007e d0b8                      	rcall GAME_RESET
00007f 9478                      	sei
                                 
                                 
                                 ;***********************************************************
                                 ;*  Main Program
                                 ;***********************************************************
                                 MAIN:
                                 	State_0:
000080 e0a4                      		ldi XL, low(welcome_string)
000081 e0b2                      		ldi XH, high(welcome_string)
000082 e1c4                      		ldi YL, low(press_pd7_string)
000083 e0d2                      		ldi YH, high(press_pd7_string)
                                 
000084 9100 0201                 		lds mpr, ready_flag
000086 2300                      		tst mpr ; are we ready?
000087 f041                      		breq State_0_LED_COPY ; no? jump
                                 
000088 e2a4                      		ldi XL, low(ready_string_one)
000089 e0b2                      		ldi XH, high(ready_string_one)
00008a e3c4                      		ldi YL, low(ready_string_two)
00008b e0d2                      		ldi YH, high(ready_string_two)
                                 
00008c 9100 0202                 		lds mpr, partner_ready_flag
00008e 2300                      		tst mpr ; is our partner ready?
00008f f411                      		brne State_1 ; yes? jump to state 1
                                 		State_0_LED_COPY:
000090 d122                      		rcall COPY_TO_LCD
000091 cfee                      		rjmp MAIN
                                 
                                 		; at this point both players are ready
                                 		;inc game_state
                                 
                                 	State_1:
000092 e031                      		ldi game_state, 1
000093 d060                      		rcall USART_Transmit
000094 e4a4                      		ldi XL, low(game_start_string)
000095 e0b2                      		ldi XH, high(game_start_string)
000096 edc5                      		ldi YL, low(blank_string)
000097 e0d2                      		ldi YH, high(blank_string)
000098 d11a                      		rcall COPY_TO_LCD
000099 9a2f                      		sbi PORTB, 7
00009a 9a2e                      		sbi PORTB, 6
00009b 9a2d                      		sbi PORTB, 5
00009c 9a2c                      		sbi PORTB, 4
00009d d04b                      		rcall WAIT_ONE_AND_HALF
00009e 982f                      		cbi PORTB, 7
00009f d049                      		rcall WAIT_ONE_AND_HALF
0000a0 982e                      		cbi PORTB, 6
0000a1 d047                      		rcall WAIT_ONE_AND_HALF
0000a2 982d                      		cbi PORTB, 5
0000a3 d045                      		rcall WAIT_ONE_AND_HALF
0000a4 982c                      		cbi PORTB, 4
0000a5 d043                      		rcall WAIT_ONE_AND_HALF ; so both boards can recieve data
                                 
                                 	State_2:
0000a6 2733                      		clr game_state
0000a7 e9a4                      		ldi XL, low(partner_string)
0000a8 e0b2                      		ldi XH, high(partner_string)
0000a9 e8c4                      		ldi YL, low(hand_string)
0000aa e0d2                      		ldi YH, high(hand_string)
0000ab d107                      		rcall COPY_TO_LCD
0000ac 9a2f                      		sbi PORTB, 7
0000ad 9a2e                      		sbi PORTB, 6
0000ae 9a2d                      		sbi PORTB, 5
0000af 9a2c                      		sbi PORTB, 4
0000b0 d038                      		rcall WAIT_ONE_AND_HALF
0000b1 982f                      		cbi PORTB, 7
0000b2 d036                      		rcall WAIT_ONE_AND_HALF
0000b3 982e                      		cbi PORTB, 6
0000b4 d034                      		rcall WAIT_ONE_AND_HALF
0000b5 982d                      		cbi PORTB, 5
0000b6 d032                      		rcall WAIT_ONE_AND_HALF
0000b7 982c                      		cbi PORTB, 4
0000b8 d030                      		rcall WAIT_ONE_AND_HALF
                                 
                                 	State_3:
0000b9 e8c4                      		ldi YL, low(hand_string)
0000ba e0d2                      		ldi YH, high(hand_string)
                                 
0000bb 9100 0203                 		lds mpr, hand_state_byte
0000bd 9170 02a4                 		lds mpr2, partner_result
0000bf 1707                      		cp mpr, mpr2
0000c0 f419                      		brne Not_Draw
                                 
0000c1 eaa5                      		ldi XL, low(draw_string)
0000c2 e0b2                      		ldi XH, high(draw_string)
0000c3 c015                      		rjmp State_3_End
                                 
                                 		Not_Draw:
0000c4 3000                      		cpi mpr, 0 ; did we select rock?
0000c5 f021                      		breq ROCK_SELECT
0000c6 3001                      		cpi mpr, 1 ; did we select paper?
0000c7 f029                      		breq PAPER_SELECT
0000c8 3002                      		cpi mpr, 2 ; did we select scissors?
0000c9 f031                      		breq SCISSORS_SELECT
                                 
                                 		ROCK_SELECT:
0000ca 3072                      		cpi mpr2, 2 ; did our opponent select scissors?
0000cb f039                      		breq WIN_jmp ; yes? we won
0000cc c009                      		rjmp LOSS_jmp ; no; we lost.
                                 
                                 		PAPER_SELECT:
0000cd 3070                      		cpi mpr2, 0 ; did our opponent select rock?
0000ce f021                      		breq WIN_jmp
0000cf c006                      		rjmp LOSS_jmp
                                 
                                 		SCISSORS_SELECT:
0000d0 3071                      		cpi mpr2, 1 ; did our opponent select paper?
0000d1 f009                      		breq WIN_jmp
0000d2 c003                      		rjmp LOSS_jmp
                                 
                                 
                                 		WIN_jmp:
0000d3 eba5                      		ldi XL, low(win_string)
0000d4 e0b2                      		ldi XH, high(win_string)
0000d5 c003                      		rjmp State_3_End
                                 
                                 		LOSS_jmp:
0000d6 eca5                      		ldi XL, low(loss_string)
0000d7 e0b2                      		ldi XH, high(loss_string)
0000d8 c000                      		rjmp State_3_End
                                 
                                 		State_3_End:
0000d9 d0d9                      		rcall COPY_TO_LCD
0000da 9a2f                      		sbi PORTB, 7
0000db 9a2e                      		sbi PORTB, 6
0000dc 9a2d                      		sbi PORTB, 5
0000dd 9a2c                      		sbi PORTB, 4
0000de d00a                      		rcall WAIT_ONE_AND_HALF
0000df 982f                      		cbi PORTB, 7
0000e0 d008                      		rcall WAIT_ONE_AND_HALF
0000e1 982e                      		cbi PORTB, 6
0000e2 d006                      		rcall WAIT_ONE_AND_HALF
0000e3 982d                      		cbi PORTB, 5
0000e4 d004                      		rcall WAIT_ONE_AND_HALF
0000e5 982c                      		cbi PORTB, 4
0000e6 d002                      		rcall WAIT_ONE_AND_HALF
                                 
0000e7 d04f                      		rcall GAME_RESET
                                 
0000e8 cf97                      	rjmp	MAIN
                                 
                                 ;***********************************************************
                                 ;*	Functions and Subroutines
                                 ;***********************************************************
                                 
                                 
                                 WAIT_ONE_AND_HALF:
0000e9 e976                      	ldi	mpr2, 150	; wait half a second
                                 WAIT_10ms:
0000ea eb02                      	ldi	mpr, 178
0000eb bd06                      	out	TCNT0, mpr
                                 WAIT_LOOP:
0000ec b325                      	in r18, TIFR0
0000ed 7021                      	andi r18, 0b00000001
0000ee f3e9                      	breq WAIT_LOOP
0000ef e021                      	ldi	r18, 0b00000001
0000f0 bb25                      	out TIFR0, r18
0000f1 957a                      	dec mpr2
0000f2 f7b9                      	brne WAIT_10ms
0000f3 9508                      	ret
                                 
                                 USART_Transmit:
0000f4 930f                      	push mpr
0000f5 9100 00c8                 	lds	mpr, UCSR1A
0000f7 ff05                      	sbrs mpr, UDRE1
0000f8 cffb                      	rjmp USART_Transmit
0000f9 9310 00ce                 	sts UDR1, buffer
0000fb 910f                      	pop mpr
0000fc 9508                      	ret
                                 
                                 USART_Recieve:
0000fd 930f                      	push mpr
0000fe 9110 00ce                 	lds buffer, UDR1
000100 93af                      	push XL
000101 93bf                      	push XH
                                 
000102 3f1f                      	cpi buffer, SendReady ; did our opponent send a ready signal?
000103 f031                      	breq Partner_Ready
                                 
000104 3010                      	cpi buffer, SendRock ; did our opponent send a rock signal?
000105 f041                      	breq Rock_Sent
                                 
000106 3011                      	cpi buffer, SendPaper
000107 f069                      	breq Paper_Sent
                                 
000108 3012                      	cpi buffer, SendScissors
000109 f091                      	breq Scissors_Sent
                                 
                                 	Partner_Ready:
00010a e001                      		ldi mpr, 1
00010b 9300 0202                 		sts partner_ready_flag, mpr
00010d c015                      		rjmp Rx_End
                                 
                                 	Rock_Sent:
00010e e000                      		ldi mpr, SendRock
00010f 9300 02a4                 		sts partner_result, mpr
000111 e5a4                      		ldi XL, low(rock_string)
000112 e0b2                      		ldi XH, high(rock_string)
000113 d013                      		rcall PARTNER_COPY_HAND
000114 c00e                      		rjmp Rx_End
                                 	Paper_Sent:
000115 e001                      		ldi mpr, SendPaper
000116 9300 02a4                 		sts partner_result, mpr
000118 e6a4                      		ldi XL, low(paper_string)
000119 e0b2                      		ldi XH, high(paper_string)
00011a d00c                      		rcall PARTNER_COPY_HAND
00011b c007                      		rjmp Rx_End
                                 	Scissors_Sent:
00011c e002                      		ldi mpr, SendScissors
00011d 9300 02a4                 		sts partner_result, mpr
00011f e7a4                      		ldi XL, low(scissors_string)
000120 e0b2                      		ldi XH, high(scissors_string)
000121 d005                      		rcall PARTNER_COPY_HAND
000122 c000                      		rjmp Rx_End
                                 		
                                 
                                 	Rx_End:
000123 91bf                      	pop XH
000124 91af                      	pop XL
000125 910f                      	pop mpr
000126 9508                      	ret
                                 
                                 PARTNER_COPY_HAND:
000127 930f                      	push mpr
000128 937f                      	push mpr2
000129 93ef                      	push ZL
00012a 93ff                      	push ZH
                                 
00012b e9e4                      	ldi ZL, low(partner_string)
00012c e0f2                      	ldi ZH, high(partner_string)
                                 
00012d e170                      	ldi mpr2, 16
                                 	PARTNER_COPY_HAND_LOOP:
00012e 910d                      	ld mpr, X+
00012f 9301                      	st Z+, mpr
000130 957a                      	dec mpr2
000131 f7e1                      	brne PARTNER_COPY_HAND_LOOP
                                 
000132 91ff                      	pop ZH
000133 91ef                      	pop ZL
000134 917f                      	pop mpr2
000135 910f                      	pop mpr
000136 9508                      	ret
                                 
                                 
                                 GAME_RESET:
000137 e002                      	ldi mpr, 2
000138 9300 0203                 	sts hand_state_byte, mpr
00013a 2733                      	clr game_state
00013b 2711                      	clr buffer
00013c 2700                      	clr mpr
00013d 2777                      	clr mpr2
00013e 9300 0200                     sts debounce_flag, mpr
000140 9300 0201                 	sts ready_flag, mpr
000142 9300 0202                 	sts partner_ready_flag, mpr
000144 9300 0081                 	sts TCCR1B, mpr
000146 9300 006f                 	sts TIMSK1, mpr
000148 9300 02a4                 	sts partner_result, mpr
                                 	
00014a d07d                      	rcall COPY_ALL_STRINGS
                                 
00014b 9508                      	ret
                                 
                                 PD4_ISR:
00014c 930f                      	push mpr
00014d 937f                      	push mpr2
00014e 93ef                      	push ZL
00014f 93ff                      	push ZH
000150 93af                      	push XL
000151 93bf                      	push XH
000152 9100 0200                 	lds   mpr, debounce_flag
000154 2300                          tst   mpr
000155 f5f1                          brne  PD4_exit
                                 
                                 
000156 e001                          ldi   mpr, 1
000157 9300 0200                     sts   debounce_flag, mpr
                                 
                                     ; --- Start debounce using Timer3 ---
000159 e60c                          ldi   mpr, low(DEBOUNCE_PRELOAD)
00015a 9300 0094                     sts   TCNT3L, mpr
00015c ef0b                          ldi   r16, high(DEBOUNCE_PRELOAD)
00015d 9300 0095                     sts   TCNT3H, r16
                                 
00015f 2700                          clr   mpr
000160 9300 0090                     sts   TCCR3A, mpr
                                 
000162 e005                          ldi   mpr, (1<<CS32) | (1<<CS30)
000163 9300 0091                     sts   TCCR3B, mpr
                                 
000165 e001                          ldi   mpr, (1<<TOIE3)
000166 9300 0071                     sts   TIMSK3, mpr
                                 
000168 3031                      	cpi game_state, 1 ; are we in the main  phase
000169 f551                      	brne PD4_exit ; if not, skip
                                 
00016a 9100 0203                 	lds mpr , hand_state_byte
00016c 9503                      	inc mpr ; if 2, goes to 3~ invalid option
                                 	
00016d 9100 0203                 	lds     mpr, hand_state_byte  
00016f 9503                          inc     mpr                  
000170 3003                          cpi     mpr, 3              ;
000171 f008                          brlo    ContinueCycle       ;
000172 2700                          clr     mpr                 ; i
                                 	ContinueCycle:
000173 9300 0203                     sts     hand_state_byte, mpr  ; store updated value back
                                 
                                     ; --- Branch based on new value ---
000175 3000                          cpi     mpr, 0              ; 
000176 f029                          breq    choose_rock
000177 3001                          cpi     mpr, 1              ; 
000178 f031                          breq    choose_paper
000179 3002                          cpi     mpr, 2              ; 
00017a f039                          breq    choose_scissors
00017b c006                          rjmp    choose_scissors    ; fallback
                                 
                                 	choose_rock:
00017c e5c4                      	ldi YL, low(rock_string)
00017d e0d2                      	ldi YH, high(rock_string)
00017e c005                      	rjmp PD4_Pre_Copy
                                 
                                 	choose_paper:
00017f e6c4                      	ldi YL, low(paper_string)
000180 e0d2                      	ldi YH, high(paper_string)
000181 c002                      	rjmp PD4_Pre_Copy
                                 
                                 	choose_scissors:
000182 e7c4                      	ldi YL, low(scissors_string)
000183 e0d2                      	ldi YH, high(scissors_string)
                                 
                                 	PD4_Pre_Copy:
000184 9300 0203                 	sts hand_state_byte, mpr
000186 e1e0                      	ldi ZL, low(0x0110)
000187 e0f1                      	ldi ZH, high(0x0110)
000188 e8a4                      	ldi XL, low(hand_string)
000189 e0b2                      	ldi XH, high(hand_string)
00018a e170                      	ldi mpr2, 16
                                 	PD4_Copy:
00018b 9109                      	ld mpr, Y+
00018c 9301                      	st Z+, mpr
00018d 930d                      	st X+, mpr
00018e 957a                      	dec mpr2
00018f f7d9                      	brne PD4_Copy
000190 d118                      	rcall LCDWrLn2
000191 9110 0203                 	lds buffer, hand_state_byte
000193 df60                      	rcall USART_Transmit
                                 	
                                 
                                 PD4_exit:
000194 91bf                      	pop XH
000195 91af                      	pop XL
000196 91ff                      	pop ZH
000197 91ef                      	pop ZL
000198 917f                      	pop mpr2
000199 910f                      	pop   mpr
00019a 9508                          ret
                                 
                                 PD7_ISR:
00019b 930f                      	push mpr
                                 
00019c 9100 0201                 	lds mpr, ready_flag
00019e 2300                      	tst mpr ; have we readied up yet?
00019f f429                      	brne PD7_exit ; we have, end ISR
                                 
0001a0 e001                      	ldi mpr, 1
0001a1 9300 0201                 	sts ready_flag, mpr ; ready us up
                                 
0001a3 ef1f                      	ldi buffer, SendReady
0001a4 df4f                      	rcall USART_Transmit ; send ready signal
                                 
                                 PD7_exit:
0001a5 910f                      	pop mpr
0001a6 9508                      	ret
                                 
                                 Timer3_OVF_ISR:
0001a7 930f                      	push mpr
                                     ; Clear debounce flag so a new button press can be processed
0001a8 e000                          ldi   mpr, 0
0001a9 9300 0200                     sts   debounce_flag, mpr
                                 
                                     ; Stop Timer/Counter3 by clearing its clock source (TCCR3B)
0001ab 2700                          clr   mpr
0001ac 9300 0091                     sts   TCCR3B, mpr
                                 
                                     ; Disable Timer/Counter3 Overflow Interrupt by clearing TIMSK3
0001ae 2700                          clr   mpr
0001af 9300 0071                     sts   TIMSK3, mpr
                                 
0001b1 910f                      	pop mpr
                                 
0001b2 9508                          ret          
                                 
                                 COPY_TO_LCD:
0001b3 930f                      	push mpr
0001b4 937f                      	push mpr2
                                 
0001b5 d0fe                      	rcall LCDClr
0001b6 e0e0                      	ldi ZL, low(0x0100)
0001b7 e0f1                      	ldi ZH, high(0x0100)
                                 
0001b8 e170                      	ldi mpr2, 16
                                 	TOP_LOOP:
0001b9 910d                      	ld mpr, X+
0001ba 9301                      	st Z+, mpr
0001bb 957a                      	dec mpr2
0001bc f7e1                      	brne TOP_LOOP
                                 
                                 
0001bd e1e0                      	ldi ZL, low(0x0110)
0001be e0f1                      	ldi ZH, high(0x0110)
                                 
0001bf e170                      	ldi mpr2, 16
                                 	BOTTOM_LOOP:
0001c0 9109                      	ld mpr, Y+
0001c1 9301                      	st Z+, mpr
0001c2 957a                      	dec mpr2
0001c3 f7e1                      	brne BOTTOM_LOOP
                                 
0001c4 917f                      	pop mpr2
0001c5 910f                      	pop mpr
0001c6 d0d4                      	rcall LCDWrite
0001c7 9508                      	ret
                                 
                                 
                                 
                                 COPY_ALL_STRINGS:
                                 	; Copy welcome_string (16 bytes)
0001c8 e2ea                          ldi   ZL, low(WELCOME_START * 2)
0001c9 e0f4                          ldi   ZH, high(WELCOME_START * 2)
0001ca e0c4                          ldi   YL, low(welcome_string)
0001cb e0d2                          ldi   YH, high(welcome_string)
0001cc d042                          rcall Copy16BytesFromProgmem
                                 
                                     ; Copy press_pd7_string (16 bytes)
0001cd e3ea                          ldi   ZL, low(PRESS_PD7_START * 2)
0001ce e0f4                          ldi   ZH, high(PRESS_PD7_START * 2)
0001cf e1c4                          ldi   YL, low(press_pd7_string)
0001d0 e0d2                          ldi   YH, high(press_pd7_string)
0001d1 d03d                          rcall Copy16BytesFromProgmem
                                 
                                     ; Copy ready_string_one (16 bytes)
0001d2 e4ea                          ldi   ZL, low(READY_LINE_ONE_START * 2)
0001d3 e0f4                          ldi   ZH, high(READY_LINE_ONE_START * 2)
0001d4 e2c4                          ldi   YL, low(ready_string_one)
0001d5 e0d2                          ldi   YH, high(ready_string_one)
0001d6 d038                          rcall Copy16BytesFromProgmem
                                 
                                     ; Copy ready_string_two (16 bytes)
0001d7 e5ea                          ldi   ZL, low(READY_LINE_TWO_START * 2)
0001d8 e0f4                          ldi   ZH, high(READY_LINE_TWO_START * 2)
0001d9 e3c4                          ldi   YL, low(ready_string_two)
0001da e0d2                          ldi   YH, high(ready_string_two)
0001db d033                          rcall Copy16BytesFromProgmem
                                 
                                     ; Copy main_string (16 bytes)
0001dc e6ea                          ldi   ZL, low(GAME_START * 2)
0001dd e0f4                          ldi   ZH, high(GAME_START * 2)
0001de e4c4                          ldi   YL, low(game_start_string)
0001df e0d2                          ldi   YH, high(game_start_string)
0001e0 d02e                          rcall Copy16BytesFromProgmem
                                 
0001e1 e7ea                      	ldi   ZL, low(ROCK * 2)
0001e2 e0f4                          ldi   ZH, high(ROCK * 2)
0001e3 e5c4                          ldi   YL, low(rock_string)
0001e4 e0d2                          ldi   YH, high(rock_string)
0001e5 d029                          rcall Copy16BytesFromProgmem
                                 
0001e6 eaea                      	ldi   ZL, low(BLANK * 2)
0001e7 e0f4                          ldi   ZH, high(BLANK * 2)
0001e8 e8c4                          ldi   YL, low(hand_string)
0001e9 e0d2                          ldi   YH, high(hand_string)
0001ea d024                          rcall Copy16BytesFromProgmem
                                 
0001eb e8ea                      	ldi   ZL, low(PAPER * 2)
0001ec e0f4                          ldi   ZH, high(PAPER * 2)
0001ed e6c4                          ldi   YL, low(paper_string)
0001ee e0d2                          ldi   YH, high(paper_string)
0001ef d01f                          rcall Copy16BytesFromProgmem
                                 
0001f0 e9ea                      	ldi   ZL, low(SCISSORS * 2)
0001f1 e0f4                          ldi   ZH, high(SCISSORS * 2)
0001f2 e7c4                          ldi   YL, low(scissors_string)
0001f3 e0d2                          ldi   YH, high(scissors_string)
0001f4 d01a                          rcall Copy16BytesFromProgmem
                                 
0001f5 eaea                      	ldi   ZL, low(BLANK * 2)
0001f6 e0f4                          ldi   ZH, high(BLANK * 2)
0001f7 e9c4                          ldi   YL, low(partner_string)
0001f8 e0d2                          ldi   YH, high(partner_string)
0001f9 d015                          rcall Copy16BytesFromProgmem
                                 
0001fa eaea                      	ldi   ZL, low(BLANK * 2)
0001fb e0f4                          ldi   ZH, high(BLANK * 2)
0001fc edc5                          ldi   YL, low(blank_string)
0001fd e0d2                          ldi   YH, high(blank_string)
0001fe d010                          rcall Copy16BytesFromProgmem
                                 
0001ff ebea                      	ldi   ZL, low(DRAW * 2)
000200 e0f4                          ldi   ZH, high(DRAW * 2)
000201 eac5                          ldi   YL, low(draw_string)
000202 e0d2                          ldi   YH, high(draw_string)
000203 d00b                          rcall Copy16BytesFromProgmem
                                 
000204 ecea                      	ldi   ZL, low(WIN * 2)
000205 e0f4                          ldi   ZH, high(WIN * 2)
000206 ebc5                          ldi   YL, low(win_string)
000207 e0d2                          ldi   YH, high(win_string)
000208 d006                          rcall Copy16BytesFromProgmem
                                 
000209 edea                      	ldi   ZL, low(LOSS * 2)
00020a e0f4                          ldi   ZH, high(LOSS * 2)
00020b ecc5                          ldi   YL, low(loss_string)
00020c e0d2                          ldi   YH, high(loss_string)
00020d d001                          rcall Copy16BytesFromProgmem
                                 
00020e 9508                          ret
                                 
                                 Copy16BytesFromProgmem:
00020f e100                          ldi   mpr, 16        ; Set loop counter to 16 bytes
                                 Copy16Loop:
000210 9005                          lpm   r0, Z+         ; Load a byte from program memory using Z, then increment Z.
000211 9209                          st    Y+, r0         ; Store the byte into data memory at Y, then increment Y.
000212 950a                          dec   mpr           ; Decrement the loop counter.
000213 f7e1                          brne  Copy16Loop     ; Repeat loop until counter reaches zero.
000214 9508                          ret                  ; Return from subroutine.
                                 
                                 ;***********************************************************
                                 ;*	Stored Program Data
                                 ;***********************************************************
                                 .dseg
                                 .org 0x0200           
000200                           debounce_flag: .byte 1
000201                           ready_flag: .byte 1
000202                           partner_ready_flag: .byte 1
000203                           hand_state_byte: .byte 1
000204                           welcome_string: .byte 16
000214                           press_pd7_string: .byte 16
000224                           ready_string_one: .byte 16
000234                           ready_string_two: .byte 16
000244                           game_start_string: .byte 16
000254                           rock_string: .byte 16
000264                           paper_string: .byte 16
000274                           scissors_string: .byte 16
000284                           hand_string: .byte 16
000294                           partner_string: .byte 16
0002a4                           partner_result: .byte 1
0002a5                           draw_string: .byte 16
0002b5                           win_string: .byte 16
0002c5                           loss_string: .byte 16
0002d5                           blank_string: .byte 16
                                 
                                 ;-----------------------------------------------------------
                                 ; An example of storing a string. Note the labels before and
                                 ; after the .DB directive; these can help to access the data
                                 ;-----------------------------------------------------------
                                 .cseg
                                 WELCOME_START:
000215 6557
000216 636c
000217 6d6f
000218 2165
000219 2020
00021a 2020
00021b 2020
00021c 2020                          .DB		"Welcome!        "		; Declaring data in ProgMem
                                 
                                 PRESS_PD7_START:
00021d 6c50
00021e 6165
00021f 6573
000220 7020
000221 6572
000222 7373
000223 5020
000224 3744                      	.DB		"Please press PD7"
                                 
                                 READY_LINE_ONE_START:
000225 4552
000226 4441
000227 2e59
000228 5720
000229 6961
00022a 6974
00022b 676e
00022c 2020                      	.DB		"READY. Waiting  "
                                 
                                 READY_LINE_TWO_START:
00022d 6f66
00022e 2072
00022f 6874
000230 2065
000231 706f
000232 6f70
000233 656e
000234 746e                      	.DB		"for the opponent"
                                 
                                 GAME_START:
000235 4147
000236 454d
000237 5320
000238 4154
000239 5452
00023a 2020
00023b 2020
00023c 2020                      	.DB		"GAME START      "
                                 
                                 ROCK:
00023d 4f52
00023e 4b43
00023f 2020
000240 2020
000241 2020
000242 2020
000243 2020
000244 2020                      	.DB		"ROCK            "
                                 
                                 PAPER:
000245 4150
000246 4550
000247 2052
000248 2020
000249 2020
00024a 2020
00024b 2020
00024c 2020                      	.DB		"PAPER           "
                                 
                                 SCISSORS:
00024d 4353
00024e 5349
00024f 4f53
000250 5352
000251 2020
000252 2020
000253 2020
000254 2020                      	.DB		"SCISSORS        "
                                 
                                 
                                 BLANK:
000255 2020
000256 2020
000257 2020
000258 2020
000259 2020
00025a 2020
00025b 2020
00025c 2020                      	.DB		"                "
                                 
                                 DRAW:
00025d 7244
00025e 7761
00025f 202e
000260 2020
000261 2020
000262 2020
000263 2020
000264 2020                      	.DB		"Draw.           "
                                 
                                 WIN:
000265 6f59
000266 2075
000267 6f57
000268 216e
000269 2020
00026a 2020
00026b 2020
00026c 2020                      	.DB		"You Won!        "
                                 
                                 LOSS:
00026d 6f59
00026e 2075
00026f 6f6c
000270 7473
000271 2020
000272 2020
000273 2020
000274 2020                      	.DB		"You lost        "
                                 
                                 ;***********************************************************
                                 ;*	Additional Program Includes
                                 ;***********************************************************
                                 .include "LCDDriver.asm"		; Include the LCD Driver
                                 
                                 ;*	Oregon State University
                                 ;*	ST7565R LCD Driver
                                 ;*	This code configures the graphical LCD and emulates
                                 ;*	the behavior of a 2x16 character display.
                                 ;*
                                 ;*	The LCD has room for 32 characters in total
                                 ;*	(16 on the top and 16 on the bottom).
                                 ;*	The upper 16 characters should be located in SRAM starting at 0x0100.
                                 ;*	The lower 16 characters should be located in SRAM starting at 0x0110.
                                 ;*
                                 ;*	NOTE: Register r16 MUST be named 'mpr' in the Main Code
                                 ;*	Something like this:
                                 ;*	.def	mpr = r16
                                 ;*
                                 ;*	WARNING: Register r20-r22 are reserved and cannot be
                                 ;*		renamed outside of the LCD Driver functions. Doing
                                 ;*		so will damage the functionality of the LCD Driver
                                 ;*
                                 ;*	Acknowledgements: the Bin2ASCII and div10 procedures were written by
                                 ;*	David Zier for a previous board. The code has been retained intact.
                                 ;*
                                 ;*********************************************************************
                                 ;*	Rev	Date		Name			Description
                                 ;*--------------------------------------------------------------------
                                 ;*	-	8/18/22	Justin Goins	Version 1.0
                                 ;*
                                 ;*
                                 ;*********************************************************************
                                 
                                 .include "m32U4def.inc"				; Include definition file
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32U4.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32U4def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32U4
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32U4
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32U4DEF_INC_
                                 #endif  /* _M32U4DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Register definitions
                                 .def	count = r20			; Character Counter
                                 .def	q = r21			; Quotient for div10
                                 .def	r = r22			; Remander for div10
                                 
                                 ; The following constants are not intended to be modified.
                                 .equ	lcd_buffer_addr = 0x0100 ; define the SRAM base address of the LCD buffer
                                 
                                 ; This information is gathered from the ST7565R datasheet.
                                 ; define some command patterns
                                 .equ	lcd_c_disp_en = 0b10101110 ; lsb indicates whether the LCD is on (1) or off (0)
                                 .equ	lcd_c_disp_set_start_ln = 0b01000000 ; lower 6 bits indicate the line index (0 - 63)
                                 .equ	lcd_c_disp_set_page_addr = 0b10110000 ; lower 4 bits indicate the page address (page 3 is at top and page 0 is at bottom)
                                 ; together, these commands allow you to specify a column index from (0 - 131):
                                 .equ	lcd_c_disp_set_col_addr_h = 0b00010000 ; lower 4 bits indicate the 4 high bits of the column address
                                 .equ	lcd_c_disp_set_col_addr_l = 0b00000000 ; lower 4 bits indicate the 4 low bits of the column address
                                 .equ	lcd_c_disp_set_invert = 0b10100110 ; lsb indicates whether the LCD is normal (0) or inverted (1)
                                 .equ	lcd_c_disp_fill = 0b10100100 ; lsb indicates whether the LCD is normal (0) or filled with dots (1)
                                 .equ	lcd_c_disp_reset = 0b11100010 ; resets the line/page addresses and other stuff, does not affect data RAM
                                 .equ	lcd_c_disp_set_bias = 0xA2 ; 1/6 bias (in 1/33 duty mode)
                                 .equ	lcd_c_disp_set_scandir = 0b11000000 ; select normal scan direction (most significant bit is placed at top of LCD)
                                 .equ	lcd_c_disp_set_contrast_1 = 0b10000001 ; first we send this command then we pass the value
                                 .equ	lcd_c_disp_set_contrast_2 = 15 ; can select a contrast value between 1 and 63
                                 .equ	lcd_c_disp_set_res_ratio = 0x22 ; see the datasheet
                                 .equ	lcd_c_disp_vreg_on = 0x2F ; enable voltage booster, voltage regulator, and voltage follower
                                 
                                 ; use this command to write into the LCD RAM:
                                 .equ	lcd_c_disp_write = 0b00000000 ; these 8 bits are the data to be placed in the target. 
                                 ; note that the column address is automatically incremented by 1 after each write to the LCD data
                                 
                                 ; everything in this driver file needs to go into the code segment
                                 .cseg
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDInit
                                 ;* Desc:	This function initializes the LCD control pins and
                                 ;*		sets reasonable values for the configuration registers.
                                 ;*****************************************************************
                                 LCDInit:
000275 930f                      	push	mpr
                                 
                                 	; set MOSI, SCL, and SS as outputs
000276 9a22                      	sbi	DDRB, DDB2	; Port B 2
000277 9a21                      	sbi	DDRB, DDB1	; Port B 1
000278 9a20                      	sbi	DDRB, DDB0	; Port B 0
                                 	; ensure that SS is deactivated (active low)
000279 9a28                      	sbi	PORTB, 0
                                 	; set lcd_A0 as output
00027a 9a81                      	sbi	DDRF, DDF1	; Port F 1
                                 	; enable LCD backlight control
00027b 9a3f                      	sbi	DDRC, DDC7	; Port C 7
                                 	; set lcd_RST_N as output
00027c 9a80                      	sbi	DDRF, DDF0	; Port F 0
                                 	; we pull lcd_RST_N low for 1 millisecond
00027d 9888                      	cbi	PORTF, 0
00027e 940e 0360                 	call	LCDDelay
000280 9a88                      	sbi	PORTF, 0
                                 	; Enable SPI mode 3, master configuration, set clock rate fck/2 using SPI2X
000281 e50c                      	ldi	mpr, (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA)
000282 bd0c                      	out	SPCR, mpr
000283 e001                      	ldi	mpr, (1<<SPI2X)
000284 bd0d                      	out	SPSR, mpr
                                 	; Note: after transmitting a byte, the SPI interrupt flag will
                                 	; be automatically cleared next time we: 1) read SPSR and ALSO 2) access SPDR
                                 
000285 9828                      	cbi	PORTB, 0	; activate slave select
                                 	; send a string of initialization commands
000286 ea02                      	ldi	mpr, lcd_c_disp_set_bias
000287 d0d2                      	rcall	LCD_Internal_WriteCMD
000288 ec00                      	ldi	mpr, lcd_c_disp_set_scandir
000289 d0d0                      	rcall	LCD_Internal_WriteCMD
00028a e801                      	ldi	mpr, lcd_c_disp_set_contrast_1
00028b d0ce                      	rcall	LCD_Internal_WriteCMD
00028c e00f                      	ldi	mpr, lcd_c_disp_set_contrast_2
00028d d0cc                      	rcall	LCD_Internal_WriteCMD
00028e e202                      	ldi	mpr, lcd_c_disp_set_res_ratio
00028f d0ca                      	rcall	LCD_Internal_WriteCMD
000290 e20f                      	ldi	mpr, lcd_c_disp_vreg_on
000291 d0c8                      	rcall	LCD_Internal_WriteCMD
000292 ea0f                      	ldi	mpr, (lcd_c_disp_en | 1 << 0)
000293 d0c6                      	rcall	LCD_Internal_WriteCMD
000294 9a28                      	sbi	PORTB, 0	; deactivate slave select
                                 
000295 910f                      	pop	mpr
000296 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDBacklightOn
                                 ;* Desc:	Enables the backlight
                                 ;*****************************************************************
                                 LCDBacklightOn:
000297 9a47                      	sbi	PORTC, 7
000298 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDBacklightOff
                                 ;* Desc:	Disables the backlight
                                 ;*****************************************************************
                                 LCDBacklightOff:
000299 9847                      	cbi	PORTC, 7
00029a 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDWrite
                                 ;* Desc:	This function writes 32 characters to the LCD screen...
                                 ;*		16 chars on the top line and 16 chars on the bottom line.
                                 ;*****************************************************************
                                 LCDWrite:
00029b d002                      	rcall	LCDWrLn1
00029c d00c                      	rcall	LCDWrLn2
00029d 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDWrLn1
                                 ;* Desc:	This function writes 16 characters to the top line.
                                 ;*****************************************************************
                                 LCDWrLn1:
00029e 93bf                      	push	XH
00029f 93af                      	push	XL
0002a0 931f                      	push	r17
                                 	; r17 specifies the destination bank in LCD RAM
0002a1 e013                      	ldi	r17, 3
                                 	; point X at the ASCII data
0002a2 e0b1                      	ldi	XH, HIGH(lcd_buffer_addr)
0002a3 e0a0                      	ldi	XL, LOW(lcd_buffer_addr)
0002a4 d05c                      	rcall	LCD_Internal_WriteLn
0002a5 911f                      	pop	r17
0002a6 91af                      	pop	XL
0002a7 91bf                      	pop	XH
0002a8 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDWrLn2
                                 ;* Desc:	This function writes 16 characters to the bottom line.
                                 ;*****************************************************************
                                 LCDWrLn2:
0002a9 93bf                      	push	XH
0002aa 93af                      	push	XL
0002ab 931f                      	push	r17
                                 	; r17 specifies the destination bank in LCD RAM
0002ac e011                      	ldi	r17, 1
                                 	; point X at the ASCII data
0002ad e0b1                      	ldi	XH, HIGH(lcd_buffer_addr+16)
0002ae e1a0                      	ldi	XL, LOW(lcd_buffer_addr+16)
0002af d051                      	rcall	LCD_Internal_WriteLn
0002b0 911f                      	pop	r17
0002b1 91af                      	pop	XL
0002b2 91bf                      	pop	XH
0002b3 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDClr
                                 ;* Desc:	This function clears the entire LCD screen.
                                 ;*****************************************************************
                                 LCDClr:
0002b4 d022                      	rcall	LCDClrLn1
0002b5 d027                      	rcall	LCDClrLn2
                                 
0002b6 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	CLRDM1
                                 ;* Desc:	This function clears Data Memory by writing 16 
                                 ;*		consecutive ASCII spaces $20 to the memory at $0100.
                                 ;*****************************************************************
                                 CLRDM1:
                                     ; Set X register points to $0100
0002b7 93bf                      	   push	   XH
0002b8 93af                      	   PUSH	   XL
0002b9 930f                                 push    r16
0002ba 931f                                 push    r17
                                 
0002bb e0b1                                 ldi     XH, HIGH(lcd_buffer_addr)
0002bc e0a0                                 ldi     XL, LOW(lcd_buffer_addr)
0002bd e110                                 ldi     r17, 16
0002be e200                                 ldi     r16, ' '
                                    CLRloop1:
0002bf 930d                                 st      X+, r16         ; load data to DM
0002c0 951a                                 dec     r17
0002c1 f7e9                                 brne    CLRloop1
                                 
0002c2 911f                      	   pop	   r17
0002c3 910f                      	   pop	   r16
0002c4 91af                      	   pop	   XL
0002c5 91bf                      	   pop	   XH
                                 
0002c6 9508                                 ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	CLRDM2
                                 ;* Desc:	This function clears Data Memory by writing 16 
                                 ;*		consecutive ASCII spaces $20 to the memory at $0110.
                                 ;*****************************************************************
                                 CLRDM2:
                                     ; Set X register points to $0110
0002c7 93bf                      	   push	   XH
0002c8 93af                      	   PUSH	   XL
0002c9 930f                                 push    r16
0002ca 931f                                 push    r17
                                 
0002cb e0b1                                 ldi     XH, HIGH(lcd_buffer_addr+16)
0002cc e1a0                                 ldi     XL, LOW(lcd_buffer_addr+16)
0002cd e110                                 ldi     r17, 16
0002ce e200                                 ldi     r16, ' '
                                    CLRloop2:
0002cf 930d                                 st      X+, r16         ; load data to DM
0002d0 951a                                 dec     r17
0002d1 f7e9                                 brne    CLRloop2
                                 
0002d2 911f                      	   pop	   r17
0002d3 910f                      	   pop	   r16
0002d4 91af                      	   pop	   XL
0002d5 91bf                      	   pop	   XH
                                 
0002d6 9508                                 ret
                                 ;*****************************************************************
                                 ;* Func:	LCDClrLn1
                                 ;* Desc:	This function clears the top line of the LCD screen.
                                 ;*****************************************************************
                                 LCDClrLn1:
0002d7 931f                      	push	r17
                                 	; r17 specifies the target bank in LCD RAM
0002d8 e013                      	ldi	r17, 3
0002d9 d060                      	rcall	LCD_Internal_ClearLn
0002da dfdc                      	rcall	CLRDM1
0002db 911f                      	pop	r17
0002dc 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDClrLn2
                                 ;* Desc:	This function clears the bottom line of the LCD screen.
                                 ;*****************************************************************
                                 LCDClrLn2:
0002dd 931f                      	push	r17
                                 	; r17 specifies the target bank in LCD RAM
0002de e011                      	ldi	r17, 1
0002df d05a                      	rcall	LCD_Internal_ClearLn
0002e0 dfe6                      	rcall	CLRDM2
0002e1 911f                      	pop	r17
0002e2 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	Bin2ASCII
                                 ;* Desc:	Converts a binary number into an ASCII 
                                 ;*			text string equivalent. 
                                 ;*			- The binary number needs to be in the mpr
                                 ;*			- The Start Address of where the text will
                                 ;*			 	be placed needs to be in the X Register
                                 ;*			- The count of the characters created are 
                                 ;*				added to the count register
                                 ;*****************************************************************
                                 Bin2ASCII:
0002e3 930f                      	push	mpr			; save mpr
0002e4 936f                      	push	r			; save r
0002e5 935f                      	push	q			; save q
0002e6 93bf                      	push	XH			; save X-pointer
0002e7 93af                      	push	XL			;
                                 
                                 	; Determine the range of mpr
0002e8 3604                      	cpi	mpr, 100		; is mpr >= 100
0002e9 f018                      	brlo	B2A_1			; goto next check
0002ea e043                      	ldi	count, 3		; Three chars are written
0002eb 9613                      	adiw	XL, 3			; Increment X 3 address spaces
0002ec c007                      	rjmp	B2A_3			; Continue with program
                                 B2A_1:
0002ed 300a                      	cpi	mpr, 10		; is mpr >= 10
0002ee f018                      	brlo	B2A_2			; Continue with program
0002ef e042                      	ldi	count, 2		; Two chars are written
0002f0 9612                      	adiw	XL, 2			; Increment X 2 address spaces
0002f1 c002                      	rjmp	B2A_3			; Continue with program
                                 B2A_2:
0002f2 9611                      	adiw	XL, 1			; Increment X 1 address space
0002f3 e041                      	ldi	count, 1		; One char is written
                                 
                                 B2A_3:
                                 	; Do-While statement that converts Binary to ASCII
0002f4 d076                      	rcall	div10			; Call the div10 function
0002f5 e300                      	ldi	mpr, '0'		; Set the base ASCII integer value
0002f6 0f06                      	add	mpr, r		; Create the ASCII integer value
0002f7 930e                      	st	-X, mpr		; Load ASCII value to memory
0002f8 2f05                      	mov	mpr, q		; Set mpr to quotient value
0002f9 3000                      	cpi	mpr, 0		; does mpr == 0
0002fa f7c9                      	brne	B2A_3			; do while (mpr != 0)
                                 
0002fb 91af                      	pop	XL			; restore X-pointer
0002fc 91bf                      	pop	XH			;
0002fd 915f                      	pop	q			; restore q
0002fe 916f                      	pop	r			; restore r
0002ff 910f                      	pop	mpr			; restore mpr
000300 9508                      	ret				; return from function
                                 
                                 ;*****************************************************************
                                 ;*	The functions below here are intended for internal use only.
                                 ;*****************************************************************
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCD_Internal_WriteLn
                                 ;* Desc:	Sends 16 characters of information to the LCD panel
                                 ;*		This is slightly more complicated than it sounds because the
                                 ;*		characters straddle two banks of the LCD memory.
                                 ;*		X is pointing at the first ASCII character to be displayed.
                                 ;*		r17 holds the index of the destination bank in LCD RAM.
                                 ;*		
                                 ;*****************************************************************
                                 LCD_Internal_WriteLn:
000301 920f                      	push	r0
000302 921f                      	push	r1
000303 930f                      	push	mpr
000304 932f                      	push	r18
000305 933f                      	push	r19
000306 938f                      	push	r24
000307 939f                      	push	r25
000308 93ef                      	push	ZL
000309 93ff                      	push	ZH
                                 
                                 	; r25:24 holds a pointer to the base address of the bitmap array
00030a e097                      	ldi	r25, HIGH(FontBitmap << 1);
00030b e282                      	ldi	r24, LOW(FontBitmap << 1);
                                 
00030c 9828                      	cbi	PORTB, 0	; activate slave select
                                 
                                 	; use a counter to track if we are on the top chunk or bottom chunk of each char
00030d e022                      	ldi	r18, 2
                                 
                                 LCD_WL_display_bank:
                                 	; set the column to 0
00030e e100                      	ldi	mpr, lcd_c_disp_set_col_addr_h
00030f d04a                      	rcall	LCD_Internal_WriteCMD
000310 e000                      	ldi	mpr, lcd_c_disp_set_col_addr_l
000311 d048                      	rcall	LCD_Internal_WriteCMD
                                 	; we need to select the appropriate page
000312 eb00                      	ldi	mpr, lcd_c_disp_set_page_addr
000313 2b01                      	or	mpr, r17	; set the lower 4 bits
000314 d045                      	rcall	LCD_Internal_WriteCMD
                                 
000315 e130                      	ldi	r19, 16	; there are 16 characters per line
                                 
                                 LCD_WL_next_char:
                                 	; get ascii code point & determine location of corresponding character bitmap
000316 900d                      	ld	r0, X+	; this should be a value from 0 to 255
000317 e100                      	ldi	mpr, 16	; there are 16 bytes per character
000318 9e00                      	mul	r0, mpr	; determine the byte offset for the desired char
000319 01fc                      	movw	ZH:ZL, r25:r24	; copy the base address to Z
00031a 0de0                      	add	ZL, r0	; finally, compute a pointer to the char bitmap
00031b 1df1                      	adc	ZH, r1
                                 
00031c e008                      	ldi	mpr, 8	; there are 8 columns for each character
                                 
                                 	; this is where we display the chunk of character (either a top chunk or bottom chunk)
00031d 9004                      	lpm	r0, Z
                                 LCD_WL_next_col:
00031e bc0e                      	out	SPDR, r0
00031f 9a89                      	sbi	PORTF, 1	; set lcd_A0 to specify data mode
000320 9632                      	adiw	ZH:ZL, 2	; point Z at the next column for this bank
000321 9004                      	lpm	r0, Z		; this is a sneaky way to save a few clock cycles (since we are waiting for the SPI communication)
                                 LCD_WL_wait_spi:
000322 b41d                      	in	r1, SPSR
000323 fe17                      	sbrs	r1, SPIF	; wait for SPI to finish
000324 cffd                      	rjmp	LCD_WL_wait_spi
                                 
                                 	; keep going until we have displayed all the columns for this character
000325 950a                      	dec	mpr
000326 f7b9                      	brne	LCD_WL_next_col
                                 
                                 	; move to the next character
000327 953a                      	dec	r19
000328 f769                      	brne	LCD_WL_next_char
                                 
                                 	; if we are at the end of the line, configure the bank and starting array offset for the bottom half of each char
000329 952a                      	dec	r18		; did we display both banks yet?
00032a f021                      	breq	LCD_WL_all_done
                                 	; if not, then prepare to display the bottom chunk of each character
00032b 951a                      	dec	r17		; decrement the bank number
00032c 9750                      	sbiw	XH:XL, 16	; X needs to point back at the beginning character of the line
00032d 9601                      	adiw	r25:r24, 1	; increment the base address pointer (now it will point to the second chunk of each char)
00032e cfdf                      	rjmp	LCD_WL_display_bank
                                 
                                 LCD_WL_all_done:
00032f 9a28                      	sbi	PORTB, 0	; deactivate slave select
                                 
000330 91ff                      	pop	ZH
000331 91ef                      	pop	ZL
000332 919f                      	pop	r25
000333 918f                      	pop	r24
000334 913f                      	pop	r19
000335 912f                      	pop	r18
000336 910f                      	pop	mpr
000337 901f                      	pop	r1
000338 900f                      	pop	r0
000339 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCD_Internal_ClearLn
                                 ;* Desc:	This function clears two of the LCD memory banks.
                                 ;*		r17 specifies the starting bank to wipe.
                                 ;*****************************************************************
                                 LCD_Internal_ClearLn:
00033a 930f                      	push	mpr
00033b 921f                      	push	r1
00033c 932f                      	push	r18
00033d 933f                      	push	r19
                                 
00033e 9828                      	cbi	PORTB, 0	; activate slave select
00033f e032                      	ldi	r19, 2	; we are going to clear two banks
                                 
                                 LCD_CLRLN_clear_bank:
                                 	; set the column to 0
000340 e100                      	ldi	mpr, lcd_c_disp_set_col_addr_h
000341 d018                      	rcall	LCD_Internal_WriteCMD
000342 e000                      	ldi	mpr, lcd_c_disp_set_col_addr_l
000343 d016                      	rcall	LCD_Internal_WriteCMD
                                 	; we need to select the appropriate page
000344 eb00                      	ldi	mpr, lcd_c_disp_set_page_addr
000345 2b01                      	or	mpr, r17	; configure the lower 4 bits
000346 d013                      	rcall	LCD_Internal_WriteCMD
                                 
000347 e820                      	ldi	r18, 128	; there are 128 columns on the LCD
000348 2700                      	clr	mpr		; we will fill each column with empty dots (i.e. blank space)
000349 9a89                      	sbi	PORTF, 1	; set lcd_A0 to specify data mode
                                 
                                 LCD_CLRLN_write_col:
00034a bd0e                      	out	SPDR, mpr	; send an empty column to the LCD via SPI
                                 LCD_CLRLN_wait_spi:
00034b b41d                      	in	r1, SPSR
00034c fe17                      	sbrs	r1, SPIF	; wait for SPI to finish
00034d cffd                      	rjmp	LCD_CLRLN_wait_spi
                                 
00034e 952a                      	dec	r18
00034f f7d1                      	brne	LCD_CLRLN_write_col	; cycle through all 128 columns
                                 
                                 	; clear the remaining bank if we haven't done so already
000350 953a                      	dec	r19
000351 f011                      	breq	LCD_CLRLN_all_done
000352 951a                      	dec	r17		; decrement the bank index
000353 cfec                      	rjmp	LCD_CLRLN_clear_bank
                                 
                                 LCD_CLRLN_all_done:
000354 9a28                      	sbi	PORTB, 0	; deactivate slave select	
                                 	
                                 	; pop registers...
000355 913f                      	pop	r19
000356 912f                      	pop	r18
000357 901f                      	pop	r1
000358 910f                      	pop	mpr
000359 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCD_Internal_WriteCMD
                                 ;* Desc:	Sends the byte in mpr
                                 ;*		If you use this function directly,
                                 ;*		YOU ARE RESPONSIBLE for handling the slave select line!
                                 ;*****************************************************************
                                 LCD_Internal_WriteCMD:
00035a bd0e                      	out	SPDR, mpr	; initiate transmission
00035b 9889                      	cbi	PORTF, 1	; clear lcd_A0 to put the lcd into command mode
                                 				; (this just has to be done before the 8th bit
                                 				; is transmitted via SPI)
                                 LCD_IWC_L1:
00035c b50d                      	in	mpr, SPSR
00035d ff07                      	sbrs	mpr, SPIF	; wait for SPI to finish
00035e cffd                      	rjmp LCD_IWC_L1
00035f 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDDelay
                                 ;* Desc:	A wait loop that will consume roughly 1ms
                                 ;*		Note that a CALL takes 4 cycles on top of this delay.
                                 ;*****************************************************************
                                 LCDDelay:
000360 930f                      	push	mpr		; 2 cycles
000361 931f                      	push	r17		; 2 cycles
000362 e01b                      	ldi	r17, 11	; 1 cycle
                                 LCDDelay_L1:
000363 ef02                      	ldi	mpr, 242	; 1 cycle
                                 LCDDelay_L2:
000364 950a                      	dec	mpr		; 1 cycle
000365 f7f1                      	brne	LCDDelay_L2	; 2 cycles on branch, 1 if no branch
000366 951a                      	dec	r17		; 1 cycle
000367 f7d9                      	brne	LCDDelay_L1	; 2 cycles on branch, 1 if no branch
000368 911f                      	pop	r17		; 2 cycles
000369 910f                      	pop	mpr		; 2 cycles
00036a 9508                      	ret			; 4 cycles
                                 
                                 ;*****************************************************************
                                 ;* Func:	div10
                                 ;* Desc:	Divides the value in the mpr by 10 and 
                                 ;*			puts the remainder in the 'r' register
                                 ;*			and the quotient in the 'q' register.
                                 ;*	DO NOT modify this function, trust me, it does
                                 ;*	divide by 10 :)  ~DZ		
                                 ;*****************************************************************
                                 div10:
00036b 920f                      	push	r0		; Save register
                                 
                                 	; q = mpr / 10 = mpr * 0.000110011001101b
00036c 2f50                      	mov	q, mpr	; q = mpr * 1.0b
00036d 9556                      	lsr	q		; q >> 2
00036e 9556                      	lsr	q		; q = mpr * 0.01b
00036f 0f50                      	add	q, mpr	; q = (q + mpr) >> 1
000370 9556                      	lsr	q		; q = mpr * 0.101b
000371 0f50                      	add	q, mpr	; q = (q + mpr) >> 3
000372 9556                      	lsr	q
000373 9556                      	lsr	q
000374 9556                      	lsr	q		; q = mpr * 0.001101b
000375 0f50                      	add	q, mpr	; q = (q + mpr) >> 1
000376 9556                      	lsr	q		; q = mpr * 0.1001101b
000377 0f50                      	add	q, mpr	; q = (q + mpr) >> 3
000378 9556                      	lsr	q				
000379 9556                      	lsr	q
00037a 9556                      	lsr	q		; q = mpr * 0.0011001101b
00037b 0f50                      	add	q, mpr	; q = (q + mpr) >> 1
00037c 9556                      	lsr	q		; q = mpr * 0.10011001101b
00037d 0f50                      	add	q, mpr	; q = (q + mpr) >> 4
00037e 9556                      	lsr	q
00037f 9556                      	lsr	q
000380 9556                      	lsr	q
000381 9556                      	lsr	q		; q = mpr * 0.000110011001101b
                                 
                                 	; compute the remainder as r = i - 10 * q
                                 	; calculate r = q * 10 = q * 1010b
000382 2f65                      	mov	r, q		; r = q * 1
000383 0f66                      	lsl	r		; r << 2
000384 0f66                      	lsl	r		; r = q * 100b
000385 0f65                      	add	r, q		; r = (r + q) << 1
000386 0f66                      	lsl	r		; r = q * 1010b
000387 2e06                      	mov	r0, r		; r0 = 10 * q
000388 2f60                      	mov	r, mpr	; r = mpr
000389 1960                      	sub	r, r0		; r = mpr - 10 * q
                                 
                                 	; Fix any errors that occur
                                 div10_1:
00038a 306a                      	cpi	r, 10		; Compare with 10
00038b f018                      	brlo	div10_2	; do nothing if r < 10
00038c 9553                      	inc	q		; fix quotient
00038d 506a                      	subi	r, 10		; fix remainder
00038e cffb                      	rjmp	div10_1	; Continue until error is corrected
                                 
                                 div10_2:
00038f 900f                      	pop	r0		; Restore registers
000390 9508                      	ret			; Return from function
                                 
                                 ;*********************************************************************
                                 ;*	Bitmap Font Information
                                 ;*	Adapted into assembly code by Justin Goins.
                                 ;*	You can edit characters or add symbols if you choose (by modifying the data below)
                                 ;*	Each character is represented as a 8 x 16 pattern of dots (8 dots wide and 16 dots high).
                                 ;*	This implies that 16 bytes are allocated to represent each character.
                                 ;*
                                 ;*	The character information is arranged so that each line below equates to a single character.
                                 ;*	The first line is ASCII character 0, the next line is ASCII character 1,
                                 ;*	the next line is ASCII character 2, and so on.
                                 ;*	You can assign characters to any index within the extended ASCII range (0 to 255).
                                 ;*	With a bit of experimentation it's possible to define and display emojis (or any other graphical output).
                                 ;*	Be creative and have fun!
                                 ;*
                                 ;*	From original license file:
                                 ;*	Copyright 2011 Suraj N. Kurapati <https://github.com/sunaku/tamzen-font>
                                 ;*	Tamzen font is free.  You are hereby granted permission to use, copy, modify, and distribute it as you see fit.
                                 ;*	Tamzen font is provided "as is" without any express or implied warranty.
                                 ;*********************************************************************
                                 FontBitmap:
000391 0000
000392 f00f
000393 1008
000394 1008
000395 1008
000396 1008
000397 f00f
000398 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x0F, 0xF0, 0x00, 0x00	; U+0000
000399 fe03
00039a fa7f
00039b f683
00039c ea83
00039d d683
00039e aa83
00039f 567f
0003a0 fe03                      .DB	0x03, 0xFE, 0x7F, 0xFA, 0x83, 0xF6, 0x83, 0xEA, 0x83, 0xD6, 0x83, 0xAA, 0x7F, 0x56, 0x03, 0xFE	; U+E0A2
0003a1 5455
0003a2 aaaa
0003a3 5455
0003a4 aaaa
0003a5 5455
0003a6 aaaa
0003a7 5455
0003a8 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; U+2592
0003a9 5455
0003aa aaaa
0003ab 5455
0003ac aaaa
0003ad 5455
0003ae aaaa
0003af 5455
0003b0 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0003b1 5455
0003b2 aaaa
0003b3 5455
0003b4 aaaa
0003b5 5455
0003b6 aaaa
0003b7 5455
0003b8 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0003b9 5455
0003ba aaaa
0003bb 5455
0003bc aaaa
0003bd 5455
0003be aaaa
0003bf 5455
0003c0 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0003c1 5455
0003c2 aaaa
0003c3 5455
0003c4 aaaa
0003c5 5455
0003c6 aaaa
0003c7 5455
0003c8 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0003c9 0000
0003ca 0007
0003cb 8008
0003cc 8008
0003cd 8008
0003ce 0007
0003cf 0000
0003d0 0000                      .DB	0x00, 0x00, 0x07, 0x00, 0x08, 0x80, 0x08, 0x80, 0x08, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00B0
0003d1 5455
0003d2 aaaa
0003d3 5455
0003d4 aaaa
0003d5 5455
0003d6 aaaa
0003d7 5455
0003d8 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0003d9 5455
0003da aaaa
0003db 5455
0003dc aaaa
0003dd 5455
0003de aaaa
0003df 5455
0003e0 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0003e1 5455
0003e2 aaaa
0003e3 5455
0003e4 aaaa
0003e5 5455
0003e6 aaaa
0003e7 5455
0003e8 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0003e9 8000
0003ea 8000
0003eb 8000
0003ec 8000
0003ed 80ff
0003ee 0000
0003ef 0000
0003f0 0000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+2518
0003f1 8000
0003f2 8000
0003f3 8000
0003f4 8000
0003f5 fe00
0003f6 0000
0003f7 0000
0003f8 0000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+2510
0003f9 0000
0003fa 0000
0003fb 0000
0003fc 0000
0003fd fe00
0003fe 8000
0003ff 8000
000400 8000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+250C
000401 0000
000402 0000
000403 0000
000404 0000
000405 80ff
000406 8000
000407 8000
000408 8000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+2514
000409 8000
00040a 8000
00040b 8000
00040c 8000
00040d feff
00040e 8000
00040f 8000
000410 8000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0xFF, 0xFE, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+253C
000411 5455
000412 aaaa
000413 5455
000414 aaaa
000415 5455
000416 aaaa
000417 5455
000418 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000419 5455
00041a aaaa
00041b 5455
00041c aaaa
00041d 5455
00041e aaaa
00041f 5455
000420 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000421 8000
000422 8000
000423 8000
000424 8000
000425 8000
000426 8000
000427 8000
000428 8000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+2500
000429 5455
00042a aaaa
00042b 5455
00042c aaaa
00042d 5455
00042e aaaa
00042f 5455
000430 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000431 5455
000432 aaaa
000433 5455
000434 aaaa
000435 5455
000436 aaaa
000437 5455
000438 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000439 0000
00043a 0000
00043b 0000
00043c 0000
00043d feff
00043e 8000
00043f 8000
000440 8000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+251C
000441 8000
000442 8000
000443 8000
000444 8000
000445 feff
000446 0000
000447 0000
000448 0000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+2524
000449 8000
00044a 8000
00044b 8000
00044c 8000
00044d 80ff
00044e 8000
00044f 8000
000450 8000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0xFF, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+2534
000451 8000
000452 8000
000453 8000
000454 8000
000455 fe00
000456 8000
000457 8000
000458 8000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0xFE, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+252C
000459 0000
00045a 0000
00045b 0000
00045c 0000
00045d feff
00045e 0000
00045f 0000
000460 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+2502
000461 5455
000462 aaaa
000463 5455
000464 aaaa
000465 5455
000466 aaaa
000467 5455
000468 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000469 5455
00046a aaaa
00046b 5455
00046c aaaa
00046d 5455
00046e aaaa
00046f 5455
000470 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000471 5455
000472 aaaa
000473 5455
000474 aaaa
000475 5455
000476 aaaa
000477 5455
000478 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000479 5455
00047a aaaa
00047b 5455
00047c aaaa
00047d 5455
00047e aaaa
00047f 5455
000480 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000481 0000
000482 1001
000483 2001
000484 e007
000485 2009
000486 1009
000487 1008
000488 2004                      .DB	0x00, 0x00, 0x01, 0x10, 0x01, 0x20, 0x07, 0xE0, 0x09, 0x20, 0x09, 0x10, 0x08, 0x10, 0x04, 0x20	; U+00A3
000489 5455
00048a aaaa
00048b 5455
00048c aaaa
00048d 5455
00048e aaaa
00048f 5455
000490 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000491 0000
000492 0000
000493 0000
000494 0000
000495 0000
000496 0000
000497 0000
000498 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0020
000499 0000
00049a 0000
00049b 0000
00049c 301f
00049d 0000
00049e 0000
00049f 0000
0004a0 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0021
0004a1 0000
0004a2 0000
0004a3 001e
0004a4 0000
0004a5 0000
0004a6 001e
0004a7 0000
0004a8 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0022
0004a9 0000
0004aa 4002
0004ab f00f
0004ac 4002
0004ad 4002
0004ae f00f
0004af 4002
0004b0 0000                      .DB	0x00, 0x00, 0x02, 0x40, 0x0F, 0xF0, 0x02, 0x40, 0x02, 0x40, 0x0F, 0xF0, 0x02, 0x40, 0x00, 0x00	; U+0023
0004b1 0000
0004b2 0000
0004b3 2006
0004b4 2009
0004b5 3839
0004b6 2009
0004b7 c008
0004b8 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x06, 0x20, 0x09, 0x20, 0x39, 0x38, 0x09, 0x20, 0x08, 0xC0, 0x00, 0x00	; U+0024
0004b9 0000
0004ba 200c
0004bb 4012
0004bc 8012
0004bd 600d
0004be 9002
0004bf 9004
0004c0 6008                      .DB	0x00, 0x00, 0x0C, 0x20, 0x12, 0x40, 0x12, 0x80, 0x0D, 0x60, 0x02, 0x90, 0x04, 0x90, 0x08, 0x60	; U+0025
0004c1 0000
0004c2 e00c
0004c3 1013
0004c4 1013
0004c5 900c
0004c6 6000
0004c7 6000
0004c8 9001                      .DB	0x00, 0x00, 0x0C, 0xE0, 0x13, 0x10, 0x13, 0x10, 0x0C, 0x90, 0x00, 0x60, 0x00, 0x60, 0x01, 0x90	; U+0026
0004c9 0000
0004ca 0000
0004cb 0000
0004cc 001e
0004cd 0000
0004ce 0000
0004cf 0000
0004d0 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0027
0004d1 0000
0004d2 0000
0004d3 0000
0004d4 e003
0004d5 180c
0004d6 0410
0004d7 0000
0004d8 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x0C, 0x18, 0x10, 0x04, 0x00, 0x00, 0x00, 0x00	; U+0028
0004d9 0000
0004da 0000
0004db 0410
0004dc 180c
0004dd e003
0004de 0000
0004df 0000
0004e0 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x10, 0x04, 0x0C, 0x18, 0x03, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0029
0004e1 0000
0004e2 8000
0004e3 a002
0004e4 c001
0004e5 c001
0004e6 a002
0004e7 8000
0004e8 0000                      .DB	0x00, 0x00, 0x00, 0x80, 0x02, 0xA0, 0x01, 0xC0, 0x01, 0xC0, 0x02, 0xA0, 0x00, 0x80, 0x00, 0x00	; U+002A
0004e9 0000
0004ea 8000
0004eb 8000
0004ec 8000
0004ed f007
0004ee 8000
0004ef 8000
0004f0 8000                      .DB	0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x07, 0xF0, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+002B
0004f1 0000
0004f2 0000
0004f3 0000
0004f4 3200
0004f5 3c00
0004f6 0000
0004f7 0000
0004f8 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+002C
0004f9 0000
0004fa 8000
0004fb 8000
0004fc 8000
0004fd 8000
0004fe 8000
0004ff 8000
000500 0000                      .DB	0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00	; U+002D
000501 0000
000502 0000
000503 0000
000504 3000
000505 3000
000506 0000
000507 0000
000508 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+002E
000509 0000
00050a 0c00
00050b 3000
00050c c000
00050d 0003
00050e 000c
00050f 0000
000510 0000                      .DB	0x00, 0x00, 0x00, 0x0C, 0x00, 0x30, 0x00, 0xC0, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00	; U+002F
000511 0000
000512 e007
000513 5008
000514 9008
000515 1009
000516 100a
000517 e007
000518 0000                      .DB	0x00, 0x00, 0x07, 0xE0, 0x08, 0x50, 0x08, 0x90, 0x09, 0x10, 0x0A, 0x10, 0x07, 0xE0, 0x00, 0x00	; U+0030
000519 0000
00051a 0000
00051b 1002
00051c 1004
00051d f00f
00051e 1000
00051f 1000
000520 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x04, 0x10, 0x0F, 0xF0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00	; U+0031
000521 0000
000522 1004
000523 3008
000524 5008
000525 9008
000526 1009
000527 1006
000528 0000                      .DB	0x00, 0x00, 0x04, 0x10, 0x08, 0x30, 0x08, 0x50, 0x08, 0x90, 0x09, 0x10, 0x06, 0x10, 0x00, 0x00	; U+0032
000529 0000
00052a 2008
00052b 1008
00052c 1009
00052d 100b
00052e 100d
00052f e008
000530 0000                      .DB	0x00, 0x00, 0x08, 0x20, 0x08, 0x10, 0x09, 0x10, 0x0B, 0x10, 0x0D, 0x10, 0x08, 0xE0, 0x00, 0x00	; U+0033
000531 0000
000532 c000
000533 4001
000534 4002
000535 4004
000536 f00f
000537 4000
000538 0000                      .DB	0x00, 0x00, 0x00, 0xC0, 0x01, 0x40, 0x02, 0x40, 0x04, 0x40, 0x0F, 0xF0, 0x00, 0x40, 0x00, 0x00	; U+0034
000539 0000
00053a 200f
00053b 1009
00053c 1009
00053d 1009
00053e 1009
00053f e008
000540 0000                      .DB	0x00, 0x00, 0x0F, 0x20, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x08, 0xE0, 0x00, 0x00	; U+0035
000541 0000
000542 e003
000543 1005
000544 1009
000545 1009
000546 1001
000547 e000
000548 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x05, 0x10, 0x09, 0x10, 0x09, 0x10, 0x01, 0x10, 0x00, 0xE0, 0x00, 0x00	; U+0036
000549 0000
00054a 0008
00054b 0008
00054c 3008
00054d c008
00054e 000b
00054f 000c
000550 0000                      .DB	0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x30, 0x08, 0xC0, 0x0B, 0x00, 0x0C, 0x00, 0x00, 0x00	; U+0037
000551 0000
000552 e006
000553 1009
000554 1009
000555 1009
000556 1009
000557 e006
000558 0000                      .DB	0x00, 0x00, 0x06, 0xE0, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x06, 0xE0, 0x00, 0x00	; U+0038
000559 0000
00055a 0007
00055b 8008
00055c 9008
00055d 9008
00055e a008
00055f c007
000560 0000                      .DB	0x00, 0x00, 0x07, 0x00, 0x08, 0x80, 0x08, 0x90, 0x08, 0x90, 0x08, 0xA0, 0x07, 0xC0, 0x00, 0x00	; U+0039
000561 0000
000562 0000
000563 0000
000564 3006
000565 3006
000566 0000
000567 0000
000568 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x30, 0x06, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+003A
000569 0000
00056a 0000
00056b 0000
00056c 3206
00056d 3c06
00056e 0000
00056f 0000
000570 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x32, 0x06, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+003B
000571 0000
000572 0000
000573 8000
000574 4001
000575 2002
000576 1004
000577 0000
000578 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x40, 0x02, 0x20, 0x04, 0x10, 0x00, 0x00, 0x00, 0x00	; U+003C
000579 0000
00057a 4002
00057b 4002
00057c 4002
00057d 4002
00057e 4002
00057f 4002
000580 0000                      .DB	0x00, 0x00, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x00, 0x00	; U+003D
000581 0000
000582 0000
000583 1004
000584 2002
000585 4001
000586 8000
000587 0000
000588 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x04, 0x10, 0x02, 0x20, 0x01, 0x40, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00	; U+003E
000589 0000
00058a 0008
00058b 0010
00058c 3011
00058d 0012
00058e 0014
00058f 0008
000590 0000                      .DB	0x00, 0x00, 0x08, 0x00, 0x10, 0x00, 0x11, 0x30, 0x12, 0x00, 0x14, 0x00, 0x08, 0x00, 0x00, 0x00	; U+003F
000591 0000
000592 f007
000593 0808
000594 c411
000595 2412
000596 2412
000597 440a
000598 e407                      .DB	0x00, 0x00, 0x07, 0xF0, 0x08, 0x08, 0x11, 0xC4, 0x12, 0x24, 0x12, 0x24, 0x0A, 0x44, 0x07, 0xE4	; U+0040
000599 0000
00059a f003
00059b 8004
00059c 8008
00059d 8008
00059e 8004
00059f f003
0005a0 0000                      .DB	0x00, 0x00, 0x03, 0xF0, 0x04, 0x80, 0x08, 0x80, 0x08, 0x80, 0x04, 0x80, 0x03, 0xF0, 0x00, 0x00	; U+0041
0005a1 0000
0005a2 f00f
0005a3 1009
0005a4 1009
0005a5 1009
0005a6 1009
0005a7 e006
0005a8 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x06, 0xE0, 0x00, 0x00	; U+0042
0005a9 0000
0005aa c003
0005ab 2004
0005ac 1008
0005ad 1008
0005ae 1008
0005af 1008
0005b0 0000                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x00, 0x00	; U+0043
0005b1 0000
0005b2 f00f
0005b3 1008
0005b4 1008
0005b5 1008
0005b6 2004
0005b7 c003
0005b8 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x04, 0x20, 0x03, 0xC0, 0x00, 0x00	; U+0044
0005b9 0000
0005ba f00f
0005bb 1009
0005bc 1009
0005bd 1009
0005be 1009
0005bf 1008
0005c0 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x08, 0x10, 0x00, 0x00	; U+0045
0005c1 0000
0005c2 f00f
0005c3 0009
0005c4 0009
0005c5 0009
0005c6 0009
0005c7 0008
0005c8 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x08, 0x00, 0x00, 0x00	; U+0046
0005c9 0000
0005ca c003
0005cb 2004
0005cc 1008
0005cd 1008
0005ce 9008
0005cf f008
0005d0 0000                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x08, 0x10, 0x08, 0x10, 0x08, 0x90, 0x08, 0xF0, 0x00, 0x00	; U+0047
0005d1 0000
0005d2 f00f
0005d3 0001
0005d4 0001
0005d5 0001
0005d6 0001
0005d7 f00f
0005d8 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x0F, 0xF0, 0x00, 0x00	; U+0048
0005d9 0000
0005da 0000
0005db 1008
0005dc 1008
0005dd f00f
0005de 1008
0005df 1008
0005e0 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x08, 0x10, 0x0F, 0xF0, 0x08, 0x10, 0x08, 0x10, 0x00, 0x00	; U+0049
0005e1 0000
0005e2 6000
0005e3 1000
0005e4 1000
0005e5 1000
0005e6 1000
0005e7 e00f
0005e8 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+004A
0005e9 0000
0005ea f00f
0005eb 8001
0005ec 8001
0005ed 4002
0005ee 2004
0005ef 1008
0005f0 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x01, 0x80, 0x01, 0x80, 0x02, 0x40, 0x04, 0x20, 0x08, 0x10, 0x00, 0x00	; U+004B
0005f1 0000
0005f2 f00f
0005f3 1000
0005f4 1000
0005f5 1000
0005f6 1000
0005f7 1000
0005f8 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00	; U+004C
0005f9 0000
0005fa f00f
0005fb 0004
0005fc 0002
0005fd 8001
0005fe 0002
0005ff 0004
000600 f00f                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x04, 0x00, 0x02, 0x00, 0x01, 0x80, 0x02, 0x00, 0x04, 0x00, 0x0F, 0xF0	; U+004D
000601 0000
000602 f00f
000603 0004
000604 0002
000605 0001
000606 8000
000607 f00f
000608 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x04, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x80, 0x0F, 0xF0, 0x00, 0x00	; U+004E
000609 0000
00060a e007
00060b 1008
00060c 1008
00060d 1008
00060e 1008
00060f e007
000610 0000                      .DB	0x00, 0x00, 0x07, 0xE0, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x07, 0xE0, 0x00, 0x00	; U+004F
000611 0000
000612 f00f
000613 8008
000614 8008
000615 8008
000616 8008
000617 0007
000618 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x08, 0x80, 0x08, 0x80, 0x08, 0x80, 0x08, 0x80, 0x07, 0x00, 0x00, 0x00	; U+0050
000619 0000
00061a e007
00061b 1008
00061c 1008
00061d 1008
00061e 1808
00061f e407
000620 0000                      .DB	0x00, 0x00, 0x07, 0xE0, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x08, 0x18, 0x07, 0xE4, 0x00, 0x00	; U+0051
000621 0000
000622 f00f
000623 8008
000624 8008
000625 c008
000626 a008
000627 1007
000628 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x08, 0x80, 0x08, 0x80, 0x08, 0xC0, 0x08, 0xA0, 0x07, 0x10, 0x00, 0x00	; U+0052
000629 0000
00062a 1006
00062b 1009
00062c 1009
00062d 9008
00062e 9008
00062f 6008
000630 0000                      .DB	0x00, 0x00, 0x06, 0x10, 0x09, 0x10, 0x09, 0x10, 0x08, 0x90, 0x08, 0x90, 0x08, 0x60, 0x00, 0x00	; U+0053
000631 0000
000632 0008
000633 0008
000634 0008
000635 f00f
000636 0008
000637 0008
000638 0008                      .DB	0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x0F, 0xF0, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00	; U+0054
000639 0000
00063a e00f
00063b 1000
00063c 1000
00063d 1000
00063e 1000
00063f e00f
000640 0000                      .DB	0x00, 0x00, 0x0F, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+0055
000641 0000
000642 000f
000643 c000
000644 3000
000645 3000
000646 c000
000647 000f
000648 0000                      .DB	0x00, 0x00, 0x0F, 0x00, 0x00, 0xC0, 0x00, 0x30, 0x00, 0x30, 0x00, 0xC0, 0x0F, 0x00, 0x00, 0x00	; U+0056
000649 0000
00064a f00f
00064b 1000
00064c 2000
00064d c000
00064e 2000
00064f 1000
000650 f00f                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x00, 0x10, 0x00, 0x20, 0x00, 0xC0, 0x00, 0x20, 0x00, 0x10, 0x0F, 0xF0	; U+0057
000651 0000
000652 300c
000653 4002
000654 8001
000655 8001
000656 4002
000657 300c
000658 0000                      .DB	0x00, 0x00, 0x0C, 0x30, 0x02, 0x40, 0x01, 0x80, 0x01, 0x80, 0x02, 0x40, 0x0C, 0x30, 0x00, 0x00	; U+0058
000659 0000
00065a 000c
00065b 0002
00065c 0001
00065d f000
00065e 0001
00065f 0002
000660 000c                      .DB	0x00, 0x00, 0x0C, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0xF0, 0x01, 0x00, 0x02, 0x00, 0x0C, 0x00	; U+0059
000661 0000
000662 3008
000663 5008
000664 9008
000665 1009
000666 100a
000667 100c
000668 1008                      .DB	0x00, 0x00, 0x08, 0x30, 0x08, 0x50, 0x08, 0x90, 0x09, 0x10, 0x0A, 0x10, 0x0C, 0x10, 0x08, 0x10	; U+005A
000669 0000
00066a 0000
00066b 0000
00066c fc1f
00066d 0410
00066e 0410
00066f 0410
000670 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFC, 0x10, 0x04, 0x10, 0x04, 0x10, 0x04, 0x00, 0x00	; U+005B
000671 0000
000672 000c
000673 0003
000674 c000
000675 3000
000676 0c00
000677 0000
000678 0000                      .DB	0x00, 0x00, 0x0C, 0x00, 0x03, 0x00, 0x00, 0xC0, 0x00, 0x30, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00	; U+005C
000679 0000
00067a 0410
00067b 0410
00067c 0410
00067d fc1f
00067e 0000
00067f 0000
000680 0000                      .DB	0x00, 0x00, 0x10, 0x04, 0x10, 0x04, 0x10, 0x04, 0x1F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+005D
000681 0000
000682 0002
000683 0004
000684 0008
000685 0004
000686 0002
000687 0000
000688 0000                      .DB	0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00	; U+005E
000689 0400
00068a 0400
00068b 0400
00068c 0400
00068d 0400
00068e 0400
00068f 0400
000690 0400                      .DB	0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04	; U+005F
000691 0000
000692 0000
000693 0000
000694 0010
000695 0008
000696 0004
000697 0000
000698 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0060
000699 0000
00069a 6000
00069b 9002
00069c 9002
00069d 9002
00069e 9002
00069f f001
0006a0 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x02, 0x90, 0x02, 0x90, 0x02, 0x90, 0x02, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+0061
0006a1 0000
0006a2 f01f
0006a3 1001
0006a4 1002
0006a5 1002
0006a6 1002
0006a7 e001
0006a8 0000                      .DB	0x00, 0x00, 0x1F, 0xF0, 0x01, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+0062
0006a9 0000
0006aa e001
0006ab 1002
0006ac 1002
0006ad 1002
0006ae 1002
0006af 2001
0006b0 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0x20, 0x00, 0x00	; U+0063
0006b1 0000
0006b2 e001
0006b3 1002
0006b4 1002
0006b5 1002
0006b6 2002
0006b7 f01f
0006b8 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x20, 0x1F, 0xF0, 0x00, 0x00	; U+0064
0006b9 0000
0006ba e001
0006bb 9002
0006bc 9002
0006bd 9002
0006be 9002
0006bf 9001
0006c0 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x90, 0x02, 0x90, 0x02, 0x90, 0x02, 0x90, 0x01, 0x90, 0x00, 0x00	; U+0065
0006c1 0000
0006c2 0002
0006c3 0002
0006c4 f00f
0006c5 0012
0006c6 0012
0006c7 0012
0006c8 0000                      .DB	0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x0F, 0xF0, 0x12, 0x00, 0x12, 0x00, 0x12, 0x00, 0x00, 0x00	; U+0066
0006c9 0000
0006ca e001
0006cb 1202
0006cc 1202
0006cd 1202
0006ce 1202
0006cf fc03
0006d0 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x12, 0x02, 0x12, 0x02, 0x12, 0x02, 0x12, 0x03, 0xFC, 0x00, 0x00	; U+0067
0006d1 0000
0006d2 f01f
0006d3 0001
0006d4 0002
0006d5 0002
0006d6 0002
0006d7 f001
0006d8 0000                      .DB	0x00, 0x00, 0x1F, 0xF0, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x01, 0xF0, 0x00, 0x00	; U+0068
0006d9 0000
0006da 0000
0006db 1002
0006dc 1002
0006dd f01b
0006de 1000
0006df 1000
0006e0 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x02, 0x10, 0x1B, 0xF0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00	; U+0069
0006e1 0000
0006e2 0000
0006e3 0200
0006e4 0202
0006e5 0202
0006e6 fc1b
0006e7 0000
0006e8 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x1B, 0xFC, 0x00, 0x00, 0x00, 0x00	; U+006A
0006e9 0000
0006ea f01f
0006eb 4000
0006ec 8000
0006ed 4001
0006ee 2002
0006ef 1000
0006f0 0000                      .DB	0x00, 0x00, 0x1F, 0xF0, 0x00, 0x40, 0x00, 0x80, 0x01, 0x40, 0x02, 0x20, 0x00, 0x10, 0x00, 0x00	; U+006B
0006f1 0000
0006f2 0010
0006f3 0010
0006f4 e01f
0006f5 1000
0006f6 1000
0006f7 1000
0006f8 0000                      .DB	0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x1F, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00	; U+006c
0006f9 0000
0006fa f003
0006fb 0002
0006fc 0002
0006fd f001
0006fe 0002
0006ff 0002
000700 f001                      .DB	0x00, 0x00, 0x03, 0xF0, 0x02, 0x00, 0x02, 0x00, 0x01, 0xF0, 0x02, 0x00, 0x02, 0x00, 0x01, 0xF0	; U+006d
000701 0000
000702 f003
000703 0001
000704 0002
000705 0002
000706 0002
000707 f001
000708 0000                      .DB	0x00, 0x00, 0x03, 0xF0, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x01, 0xF0, 0x00, 0x00	; U+006e
000709 0000
00070a e001
00070b 1002
00070c 1002
00070d 1002
00070e 1002
00070f e001
000710 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+006F
000711 0000
000712 fe03
000713 1001
000714 1002
000715 1002
000716 1002
000717 e001
000718 0000                      .DB	0x00, 0x00, 0x03, 0xFE, 0x01, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+0070
000719 0000
00071a e001
00071b 1002
00071c 1002
00071d 1002
00071e 2002
00071f fe03
000720 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x20, 0x03, 0xFE, 0x00, 0x00	; U+0071
000721 0000
000722 f003
000723 0001
000724 0002
000725 0002
000726 0002
000727 0001
000728 0000                      .DB	0x00, 0x00, 0x03, 0xF0, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00	; U+0072
000729 0000
00072a 1001
00072b 9002
00072c 9002
00072d 5002
00072e 5002
00072f 2002
000730 0000                      .DB	0x00, 0x00, 0x01, 0x10, 0x02, 0x90, 0x02, 0x90, 0x02, 0x50, 0x02, 0x50, 0x02, 0x20, 0x00, 0x00	; U+0073
000731 0000
000732 0002
000733 0002
000734 e00f
000735 1002
000736 1002
000737 1002
000738 0000                      .DB	0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x0F, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x00, 0x00	; U+0074
000739 0000
00073a e003
00073b 1000
00073c 1000
00073d 1000
00073e 2000
00073f f003
000740 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x03, 0xF0, 0x00, 0x00	; U+0075
000741 0000
000742 0003
000743 c000
000744 3000
000745 3000
000746 c000
000747 0003
000748 0000                      .DB	0x00, 0x00, 0x03, 0x00, 0x00, 0xC0, 0x00, 0x30, 0x00, 0x30, 0x00, 0xC0, 0x03, 0x00, 0x00, 0x00	; U+0076
000749 0000
00074a e003
00074b 1000
00074c 1000
00074d e001
00074e 1000
00074f 1000
000750 e003                      .DB	0x00, 0x00, 0x03, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x01, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x03, 0xE0	; U+0077
000751 0000
000752 1002
000753 2001
000754 c000
000755 c000
000756 2001
000757 1002
000758 0000                      .DB	0x00, 0x00, 0x02, 0x10, 0x01, 0x20, 0x00, 0xC0, 0x00, 0xC0, 0x01, 0x20, 0x02, 0x10, 0x00, 0x00	; U+0078
000759 0000
00075a e003
00075b 1200
00075c 1200
00075d 1200
00075e 2200
00075f fc03
000760 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x00, 0x12, 0x00, 0x12, 0x00, 0x12, 0x00, 0x22, 0x03, 0xFC, 0x00, 0x00	; U+0079
000761 0000
000762 1002
000763 3002
000764 5002
000765 9002
000766 1003
000767 1002
000768 0000                      .DB	0x00, 0x00, 0x02, 0x10, 0x02, 0x30, 0x02, 0x50, 0x02, 0x90, 0x03, 0x10, 0x02, 0x10, 0x00, 0x00	; U+007A
000769 0000
00076a 0000
00076b 8000
00076c 8000
00076d 780f
00076e 0410
00076f 0410
000770 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x0F, 0x78, 0x10, 0x04, 0x10, 0x04, 0x00, 0x00	; U+007B
000771 0000
000772 0000
000773 0000
000774 0000
000775 fc3f
000776 0000
000777 0000
000778 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+007C
000779 0000
00077a 0410
00077b 0410
00077c 780f
00077d 8000
00077e 8000
00077f 0000
000780 0000                      .DB	0x00, 0x00, 0x10, 0x04, 0x10, 0x04, 0x0F, 0x78, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00	; U+007D
000781 0000
000782 0006
000783 0008
000784 0008
000785 0004
000786 0002
000787 0002
000788 000c                      .DB	0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02, 0x00, 0x0C, 0x00	; U+007E
000789 5455
00078a aaaa
00078b 5455
00078c aaaa
00078d 5455
00078e aaaa
00078f 5455
000790 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000791 5455
000792 aaaa
000793 5455
000794 aaaa
000795 5455
000796 aaaa
000797 5455
000798 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000799 5455
00079a aaaa
00079b 5455
00079c aaaa
00079d 5455
00079e aaaa
00079f 5455
0007a0 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007a1 5455
0007a2 aaaa
0007a3 5455
0007a4 aaaa
0007a5 5455
0007a6 aaaa
0007a7 5455
0007a8 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007a9 5455
0007aa aaaa
0007ab 5455
0007ac aaaa
0007ad 5455
0007ae aaaa
0007af 5455
0007b0 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007b1 5455
0007b2 aaaa
0007b3 5455
0007b4 aaaa
0007b5 5455
0007b6 aaaa
0007b7 5455
0007b8 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007b9 5455
0007ba aaaa
0007bb 5455
0007bc aaaa
0007bd 5455
0007be aaaa
0007bf 5455
0007c0 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007c1 5455
0007c2 aaaa
0007c3 5455
0007c4 aaaa
0007c5 5455
0007c6 aaaa
0007c7 5455
0007c8 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007c9 5455
0007ca aaaa
0007cb 5455
0007cc aaaa
0007cd 5455
0007ce aaaa
0007cf 5455
0007d0 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007d1 5455
0007d2 aaaa
0007d3 5455
0007d4 aaaa
0007d5 5455
0007d6 aaaa
0007d7 5455
0007d8 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007d9 5455
0007da aaaa
0007db 5455
0007dc aaaa
0007dd 5455
0007de aaaa
0007df 5455
0007e0 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007e1 5455
0007e2 aaaa
0007e3 5455
0007e4 aaaa
0007e5 5455
0007e6 aaaa
0007e7 5455
0007e8 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007e9 5455
0007ea aaaa
0007eb 5455
0007ec aaaa
0007ed 5455
0007ee aaaa
0007ef 5455
0007f0 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007f1 5455
0007f2 aaaa
0007f3 5455
0007f4 aaaa
0007f5 5455
0007f6 aaaa
0007f7 5455
0007f8 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007f9 5455
0007fa aaaa
0007fb 5455
0007fc aaaa
0007fd 5455
0007fe aaaa
0007ff 5455
000800 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000801 5455
000802 aaaa
000803 5455
000804 aaaa
000805 5455
000806 aaaa
000807 5455
000808 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000809 5455
00080a aaaa
00080b 5455
00080c aaaa
00080d 5455
00080e aaaa
00080f 5455
000810 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000811 5455
000812 aaaa
000813 5455
000814 aaaa
000815 5455
000816 aaaa
000817 5455
000818 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000819 5455
00081a aaaa
00081b 5455
00081c aaaa
00081d 5455
00081e aaaa
00081f 5455
000820 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000821 5455
000822 aaaa
000823 5455
000824 aaaa
000825 5455
000826 aaaa
000827 5455
000828 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000829 5455
00082a aaaa
00082b 5455
00082c aaaa
00082d 5455
00082e aaaa
00082f 5455
000830 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000831 5455
000832 aaaa
000833 5455
000834 aaaa
000835 5455
000836 aaaa
000837 5455
000838 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000839 5455
00083a aaaa
00083b 5455
00083c aaaa
00083d 5455
00083e aaaa
00083f 5455
000840 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000841 5455
000842 aaaa
000843 5455
000844 aaaa
000845 5455
000846 aaaa
000847 5455
000848 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000849 5455
00084a aaaa
00084b 5455
00084c aaaa
00084d 5455
00084e aaaa
00084f 5455
000850 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000851 5455
000852 aaaa
000853 5455
000854 aaaa
000855 5455
000856 aaaa
000857 5455
000858 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000859 5455
00085a aaaa
00085b 5455
00085c aaaa
00085d 5455
00085e aaaa
00085f 5455
000860 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000861 5455
000862 aaaa
000863 5455
000864 aaaa
000865 5455
000866 aaaa
000867 5455
000868 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000869 5455
00086a aaaa
00086b 5455
00086c aaaa
00086d 5455
00086e aaaa
00086f 5455
000870 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000871 5455
000872 aaaa
000873 5455
000874 aaaa
000875 5455
000876 aaaa
000877 5455
000878 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000879 5455
00087a aaaa
00087b 5455
00087c aaaa
00087d 5455
00087e aaaa
00087f 5455
000880 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000881 5455
000882 aaaa
000883 5455
000884 aaaa
000885 5455
000886 aaaa
000887 5455
000888 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000889 5455
00088a aaaa
00088b 5455
00088c aaaa
00088d 5455
00088e aaaa
00088f 5455
000890 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000891 0000
000892 0000
000893 0000
000894 0000
000895 0000
000896 0000
000897 0000
000898 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00A0
000899 0000
00089a 0000
00089b 0000
00089c 3e03
00089d 0000
00089e 0000
00089f 0000
0008a0 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00A1
0008a1 0000
0008a2 c003
0008a3 2004
0008a4 2004
0008a5 f81f
0008a6 2004
0008a7 2004
0008a8 4002                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x04, 0x20, 0x1F, 0xF8, 0x04, 0x20, 0x04, 0x20, 0x02, 0x40	; U+00A2
0008a9 0000
0008aa 1001
0008ab 2001
0008ac e007
0008ad 2009
0008ae 1009
0008af 1008
0008b0 2004                      .DB	0x00, 0x00, 0x01, 0x10, 0x01, 0x20, 0x07, 0xE0, 0x09, 0x20, 0x09, 0x10, 0x08, 0x10, 0x04, 0x20	; U+00A3
0008b1 0000
0008b2 2004
0008b3 c003
0008b4 4002
0008b5 4002
0008b6 c003
0008b7 2004
0008b8 0000                      .DB	0x00, 0x00, 0x04, 0x20, 0x03, 0xC0, 0x02, 0x40, 0x02, 0x40, 0x03, 0xC0, 0x04, 0x20, 0x00, 0x00	; U+00A4
0008b9 0000
0008ba 0008
0008bb 4005
0008bc 4003
0008bd f001
0008be 4003
0008bf 4005
0008c0 0008                      .DB	0x00, 0x00, 0x08, 0x00, 0x05, 0x40, 0x03, 0x40, 0x01, 0xF0, 0x03, 0x40, 0x05, 0x40, 0x08, 0x00	; U+00A5
0008c1 0000
0008c2 0000
0008c3 0000
0008c4 0000
0008c5 3c0f
0008c6 0000
0008c7 0000
0008c8 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00A6
0008c9 5455
0008ca aaaa
0008cb 5455
0008cc aaaa
0008cd 5455
0008ce aaaa
0008cf 5455
0008d0 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0008d1 0000
0008d2 0000
0008d3 0060
0008d4 0000
0008d5 0000
0008d6 0060
0008d7 0000
0008d8 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00A8
0008d9 0000
0008da c003
0008db 2004
0008dc 9009
0008dd 500a
0008de 500a
0008df 2004
0008e0 c003                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x09, 0x90, 0x0A, 0x50, 0x0A, 0x50, 0x04, 0x20, 0x03, 0xC0	; U+00A9
0008e1 5455
0008e2 aaaa
0008e3 5455
0008e4 aaaa
0008e5 5455
0008e6 aaaa
0008e7 5455
0008e8 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0008e9 0000
0008ea 8000
0008eb 4001
0008ec 2002
0008ed 9004
0008ee 4001
0008ef 2002
0008f0 1004                      .DB	0x00, 0x00, 0x00, 0x80, 0x01, 0x40, 0x02, 0x20, 0x04, 0x90, 0x01, 0x40, 0x02, 0x20, 0x04, 0x10	; U+00AB
0008f1 5455
0008f2 aaaa
0008f3 5455
0008f4 aaaa
0008f5 5455
0008f6 aaaa
0008f7 5455
0008f8 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0008f9 0000
0008fa 8000
0008fb 8000
0008fc 8000
0008fd 8000
0008fe 8000
0008ff 8000
000900 0000                      .DB	0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00	; U+00AD
000901 5455
000902 aaaa
000903 5455
000904 aaaa
000905 5455
000906 aaaa
000907 5455
000908 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000909 5455
00090a aaaa
00090b 5455
00090c aaaa
00090d 5455
00090e aaaa
00090f 5455
000910 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000911 0000
000912 0007
000913 8008
000914 8008
000915 8008
000916 0007
000917 0000
000918 0000                      .DB	0x00, 0x00, 0x07, 0x00, 0x08, 0x80, 0x08, 0x80, 0x08, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00B0
000919 5455
00091a aaaa
00091b 5455
00091c aaaa
00091d 5455
00091e aaaa
00091f 5455
000920 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000921 5455
000922 aaaa
000923 5455
000924 aaaa
000925 5455
000926 aaaa
000927 5455
000928 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000929 5455
00092a aaaa
00092b 5455
00092c aaaa
00092d 5455
00092e aaaa
00092f 5455
000930 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000931 5455
000932 aaaa
000933 5455
000934 aaaa
000935 5455
000936 aaaa
000937 5455
000938 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000939 5455
00093a aaaa
00093b 5455
00093c aaaa
00093d 5455
00093e aaaa
00093f 5455
000940 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000941 5455
000942 aaaa
000943 5455
000944 aaaa
000945 5455
000946 aaaa
000947 5455
000948 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000949 5455
00094a aaaa
00094b 5455
00094c aaaa
00094d 5455
00094e aaaa
00094f 5455
000950 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000951 0000
000952 0000
000953 0200
000954 0200
000955 0c00
000956 0000
000957 0000
000958 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00B8
000959 5455
00095a aaaa
00095b 5455
00095c aaaa
00095d 5455
00095e aaaa
00095f 5455
000960 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000961 5455
000962 aaaa
000963 5455
000964 aaaa
000965 5455
000966 aaaa
000967 5455
000968 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000969 0000
00096a 1004
00096b 2002
00096c 4001
00096d 9004
00096e 2002
00096f 4001
000970 8000                      .DB	0x00, 0x00, 0x04, 0x10, 0x02, 0x20, 0x01, 0x40, 0x04, 0x90, 0x02, 0x20, 0x01, 0x40, 0x00, 0x80	; U+00BB
000971 5455
000972 aaaa
000973 5455
000974 aaaa
000975 5455
000976 aaaa
000977 5455
000978 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000979 5455
00097a aaaa
00097b 5455
00097c aaaa
00097d 5455
00097e aaaa
00097f 5455
000980 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000981 5455
000982 aaaa
000983 5455
000984 aaaa
000985 5455
000986 aaaa
000987 5455
000988 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000989 0000
00098a 0000
00098b 0c00
00098c 1200
00098d 2203
00098e 0200
00098f 0400
000990 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x12, 0x03, 0x22, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00	; U+00BF
000991 0000
000992 7000
000993 c043
000994 402c
000995 400c
000996 c003
000997 7000
000998 0000                      .DB	0x00, 0x00, 0x00, 0x70, 0x43, 0xC0, 0x2C, 0x40, 0x0C, 0x40, 0x03, 0xC0, 0x00, 0x70, 0x00, 0x00	; U+00C0
000999 0000
00099a 7000
00099b c003
00099c 400c
00099d 402c
00099e c043
00099f 7000
0009a0 0000                      .DB	0x00, 0x00, 0x00, 0x70, 0x03, 0xC0, 0x0C, 0x40, 0x2C, 0x40, 0x43, 0xC0, 0x00, 0x70, 0x00, 0x00	; U+00C1
0009a1 0000
0009a2 7000
0009a3 c023
0009a4 404c
0009a5 404c
0009a6 c023
0009a7 7000
0009a8 0000                      .DB	0x00, 0x00, 0x00, 0x70, 0x23, 0xC0, 0x4C, 0x40, 0x4C, 0x40, 0x23, 0xC0, 0x00, 0x70, 0x00, 0x00	; U+00C2
0009a9 0000
0009aa 7020
0009ab c043
0009ac 404c
0009ad 402c
0009ae c023
0009af 7040
0009b0 0000                      .DB	0x00, 0x00, 0x20, 0x70, 0x43, 0xC0, 0x4C, 0x40, 0x2C, 0x40, 0x23, 0xC0, 0x40, 0x70, 0x00, 0x00	; U+00C3
0009b1 0000
0009b2 7000
0009b3 c063
0009b4 400c
0009b5 400c
0009b6 c063
0009b7 7000
0009b8 0000                      .DB	0x00, 0x00, 0x00, 0x70, 0x63, 0xC0, 0x0C, 0x40, 0x0C, 0x40, 0x63, 0xC0, 0x00, 0x70, 0x00, 0x00	; U+00C4
0009b9 0000
0009ba 7000
0009bb c033
0009bc 404c
0009bd 404c
0009be c033
0009bf 7000
0009c0 0000                      .DB	0x00, 0x00, 0x00, 0x70, 0x33, 0xC0, 0x4C, 0x40, 0x4C, 0x40, 0x33, 0xC0, 0x00, 0x70, 0x00, 0x00	; U+00C5
0009c1 0000
0009c2 7000
0009c3 c003
0009c4 400c
0009c5 f00f
0009c6 1009
0009c7 1009
0009c8 1008                      .DB	0x00, 0x00, 0x00, 0x70, 0x03, 0xC0, 0x0C, 0x40, 0x0F, 0xF0, 0x09, 0x10, 0x09, 0x10, 0x08, 0x10	; U+00C6
0009c9 0000
0009ca c003
0009cb 2204
0009cc 1208
0009cd 1c08
0009ce 1008
0009cf 1008
0009d0 0000                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x22, 0x08, 0x12, 0x08, 0x1C, 0x08, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00C7
0009d1 0000
0009d2 f00f
0009d3 1049
0009d4 1029
0009d5 1009
0009d6 1009
0009d7 1008
0009d8 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x49, 0x10, 0x29, 0x10, 0x09, 0x10, 0x09, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00C8
0009d9 0000
0009da f00f
0009db 1009
0009dc 1009
0009dd 1029
0009de 1049
0009df 1008
0009e0 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x09, 0x10, 0x09, 0x10, 0x29, 0x10, 0x49, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00C9
0009e1 0000
0009e2 f00f
0009e3 1029
0009e4 1049
0009e5 1049
0009e6 1029
0009e7 1008
0009e8 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x29, 0x10, 0x49, 0x10, 0x49, 0x10, 0x29, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CA
0009e9 0000
0009ea f00f
0009eb 1069
0009ec 1009
0009ed 1009
0009ee 1069
0009ef 1008
0009f0 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x69, 0x10, 0x09, 0x10, 0x09, 0x10, 0x69, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CB
0009f1 0000
0009f2 0000
0009f3 1008
0009f4 1048
0009f5 f02f
0009f6 1008
0009f7 1008
0009f8 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x48, 0x10, 0x2F, 0xF0, 0x08, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CC
0009f9 0000
0009fa 0000
0009fb 1008
0009fc 1008
0009fd f02f
0009fe 1048
0009ff 1008
000a00 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x08, 0x10, 0x2F, 0xF0, 0x48, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CD
000a01 0000
000a02 0000
000a03 1008
000a04 1028
000a05 f04f
000a06 1028
000a07 1008
000a08 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x28, 0x10, 0x4F, 0xF0, 0x28, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CE
000a09 0000
000a0a 0000
000a0b 1008
000a0c 1068
000a0d f00f
000a0e 1068
000a0f 1008
000a10 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x68, 0x10, 0x0F, 0xF0, 0x68, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CF
000a11 0000
000a12 0001
000a13 f00f
000a14 1009
000a15 1009
000a16 1008
000a17 2004
000a18 c003                      .DB	0x00, 0x00, 0x01, 0x00, 0x0F, 0xF0, 0x09, 0x10, 0x09, 0x10, 0x08, 0x10, 0x04, 0x20, 0x03, 0xC0	; U+00D0
000a19 0000
000a1a f02f
000a1b 0044
000a1c 0042
000a1d 0021
000a1e 8020
000a1f f04f
000a20 0000                      .DB	0x00, 0x00, 0x2F, 0xF0, 0x44, 0x00, 0x42, 0x00, 0x21, 0x00, 0x20, 0x80, 0x4F, 0xF0, 0x00, 0x00	; U+00D1
000a21 0000
000a22 c003
000a23 2004
000a24 1048
000a25 1028
000a26 1008
000a27 2004
000a28 c003                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x48, 0x10, 0x28, 0x10, 0x08, 0x10, 0x04, 0x20, 0x03, 0xC0	; U+00D2
000a29 0000
000a2a c003
000a2b 2004
000a2c 1008
000a2d 1028
000a2e 1048
000a2f 2004
000a30 c003                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x08, 0x10, 0x28, 0x10, 0x48, 0x10, 0x04, 0x20, 0x03, 0xC0	; U+00D3
000a31 0000
000a32 c003
000a33 2004
000a34 1028
000a35 1048
000a36 1028
000a37 2004
000a38 c003                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x28, 0x10, 0x48, 0x10, 0x28, 0x10, 0x04, 0x20, 0x03, 0xC0	; U+00D4
000a39 0000
000a3a c003
000a3b 2024
000a3c 1048
000a3d 1048
000a3e 1028
000a3f 2024
000a40 c043                      .DB	0x00, 0x00, 0x03, 0xC0, 0x24, 0x20, 0x48, 0x10, 0x48, 0x10, 0x28, 0x10, 0x24, 0x20, 0x43, 0xC0	; U+00D5
000a41 0000
000a42 c003
000a43 2064
000a44 1008
000a45 1008
000a46 1008
000a47 2064
000a48 c003                      .DB	0x00, 0x00, 0x03, 0xC0, 0x64, 0x20, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x64, 0x20, 0x03, 0xC0	; U+00D6
000a49 0000
000a4a 0000
000a4b 2002
000a4c 4001
000a4d 8000
000a4e 4001
000a4f 2002
000a50 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x02, 0x20, 0x01, 0x40, 0x00, 0x80, 0x01, 0x40, 0x02, 0x20, 0x00, 0x00	; U+00D7
000a51 0000
000a52 c803
000a53 3004
000a54 5008
000a55 9009
000a56 100a
000a57 200c
000a58 c013                      .DB	0x00, 0x00, 0x03, 0xC8, 0x04, 0x30, 0x08, 0x50, 0x09, 0x90, 0x0A, 0x10, 0x0C, 0x20, 0x13, 0xC0	; U+00D8
000a59 0000
000a5a e00f
000a5b 1040
000a5c 1020
000a5d 1000
000a5e 1000
000a5f e00f
000a60 0000                      .DB	0x00, 0x00, 0x0F, 0xE0, 0x40, 0x10, 0x20, 0x10, 0x00, 0x10, 0x00, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+00D9
000a61 0000
000a62 e00f
000a63 1000
000a64 1000
000a65 1020
000a66 1040
000a67 e00f
000a68 0000                      .DB	0x00, 0x00, 0x0F, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x20, 0x10, 0x40, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+00DA
000a69 0000
000a6a e00f
000a6b 1020
000a6c 1040
000a6d 1040
000a6e 1020
000a6f e00f
000a70 0000                      .DB	0x00, 0x00, 0x0F, 0xE0, 0x20, 0x10, 0x40, 0x10, 0x40, 0x10, 0x20, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+00DB
000a71 0000
000a72 e00f
000a73 1060
000a74 1000
000a75 1000
000a76 1060
000a77 e00f
000a78 0000                      .DB	0x00, 0x00, 0x0F, 0xE0, 0x60, 0x10, 0x00, 0x10, 0x00, 0x10, 0x60, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+00DC
000a79 0000
000a7a 000c
000a7b 0062
000a7c 0001
000a7d f000
000a7e 0001
000a7f 0062
000a80 000c                      .DB	0x00, 0x00, 0x0C, 0x00, 0x62, 0x00, 0x01, 0x00, 0x00, 0xF0, 0x01, 0x00, 0x62, 0x00, 0x0C, 0x00	; U+00DD
000a81 0000
000a82 f00f
000a83 2004
000a84 2004
000a85 2004
000a86 2004
000a87 c003
000a88 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x04, 0x20, 0x04, 0x20, 0x04, 0x20, 0x04, 0x20, 0x03, 0xC0, 0x00, 0x00	; U+00DE
000a89 0000
000a8a f007
000a8b 0008
000a8c 0008
000a8d 1009
000a8e 100b
000a8f e004
000a90 0000                      .DB	0x00, 0x00, 0x07, 0xF0, 0x08, 0x00, 0x08, 0x00, 0x09, 0x10, 0x0B, 0x10, 0x04, 0xE0, 0x00, 0x00	; U+00DF
000a91 0000
000a92 6000
000a93 9012
000a94 900a
000a95 9002
000a96 9002
000a97 f001
000a98 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x12, 0x90, 0x0A, 0x90, 0x02, 0x90, 0x02, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+00E0
000a99 0000
000a9a 6000
000a9b 9002
000a9c 9002
000a9d 900a
000a9e 9012
000a9f f001
000aa0 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x02, 0x90, 0x02, 0x90, 0x0A, 0x90, 0x12, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+00E1
000aa1 0000
000aa2 6000
000aa3 900a
000aa4 9012
000aa5 9012
000aa6 900a
000aa7 f001
000aa8 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x0A, 0x90, 0x12, 0x90, 0x12, 0x90, 0x0A, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+00E2
000aa9 0000
000aaa 6008
000aab 9012
000aac 9012
000aad 900a
000aae 900a
000aaf f011
000ab0 0000                      .DB	0x00, 0x00, 0x08, 0x60, 0x12, 0x90, 0x12, 0x90, 0x0A, 0x90, 0x0A, 0x90, 0x11, 0xF0, 0x00, 0x00	; U+00E3
000ab1 0000
000ab2 6000
000ab3 901a
000ab4 9002
000ab5 9002
000ab6 901a
000ab7 f001
000ab8 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x1A, 0x90, 0x02, 0x90, 0x02, 0x90, 0x1A, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+00E4
000ab9 0000
000aba 6000
000abb 9032
000abc 904a
000abd 904a
000abe 9032
000abf f001
000ac0 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x32, 0x90, 0x4A, 0x90, 0x4A, 0x90, 0x32, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+00E5
000ac1 0000
000ac2 6000
000ac3 9002
000ac4 9002
000ac5 e001
000ac6 9002
000ac7 9002
000ac8 9001                      .DB	0x00, 0x00, 0x00, 0x60, 0x02, 0x90, 0x02, 0x90, 0x01, 0xE0, 0x02, 0x90, 0x02, 0x90, 0x01, 0x90	; U+00E6
000ac9 0000
000aca e001
000acb 1202
000acc 1202
000acd 1c02
000ace 1002
000acf 2001
000ad0 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x12, 0x02, 0x12, 0x02, 0x1C, 0x02, 0x10, 0x01, 0x20, 0x00, 0x00	; U+00E7
000ad1 0000
000ad2 e001
000ad3 9012
000ad4 900a
000ad5 9002
000ad6 9002
000ad7 9001
000ad8 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x12, 0x90, 0x0A, 0x90, 0x02, 0x90, 0x02, 0x90, 0x01, 0x90, 0x00, 0x00	; U+00E8
000ad9 0000
000ada e001
000adb 9002
000adc 9002
000add 900a
000ade 9012
000adf 9001
000ae0 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x90, 0x02, 0x90, 0x0A, 0x90, 0x12, 0x90, 0x01, 0x90, 0x00, 0x00	; U+00E9
000ae1 0000
000ae2 e001
000ae3 900a
000ae4 9012
000ae5 9012
000ae6 900a
000ae7 9001
000ae8 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x0A, 0x90, 0x12, 0x90, 0x12, 0x90, 0x0A, 0x90, 0x01, 0x90, 0x00, 0x00	; U+00EA
000ae9 0000
000aea e001
000aeb 901a
000aec 9002
000aed 9002
000aee 901a
000aef 9001
000af0 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x1A, 0x90, 0x02, 0x90, 0x02, 0x90, 0x1A, 0x90, 0x01, 0x90, 0x00, 0x00	; U+00EB
000af1 0000
000af2 0000
000af3 1012
000af4 100a
000af5 f003
000af6 1000
000af7 1000
000af8 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x12, 0x10, 0x0A, 0x10, 0x03, 0xF0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00	; U+00EC
000af9 0000
000afa 0000
000afb 1002
000afc 1002
000afd f00b
000afe 1010
000aff 1000
000b00 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x02, 0x10, 0x0B, 0xF0, 0x10, 0x10, 0x00, 0x10, 0x00, 0x00	; U+00ED
000b01 0000
000b02 0000
000b03 100a
000b04 1012
000b05 f013
000b06 1008
000b07 1000
000b08 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x0A, 0x10, 0x12, 0x10, 0x13, 0xF0, 0x08, 0x10, 0x00, 0x10, 0x00, 0x00	; U+00EE
000b09 0000
000b0a 0000
000b0b 101a
000b0c 1002
000b0d f003
000b0e 1018
000b0f 1000
000b10 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x1A, 0x10, 0x02, 0x10, 0x03, 0xF0, 0x18, 0x10, 0x00, 0x10, 0x00, 0x00	; U+00EF
000b11 0000
000b12 e001
000b13 100a
000b14 102a
000b15 101a
000b16 1016
000b17 e021
000b18 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x0A, 0x10, 0x2A, 0x10, 0x1A, 0x10, 0x16, 0x10, 0x21, 0xE0, 0x00, 0x00	; U+00F0
000b19 0000
000b1a f00b
000b1b 0012
000b1c 0012
000b1d 000a
000b1e 000a
000b1f f011
000b20 0000                      .DB	0x00, 0x00, 0x0B, 0xF0, 0x12, 0x00, 0x12, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x11, 0xF0, 0x00, 0x00	; U+00F1
000b21 0000
000b22 e001
000b23 1012
000b24 100a
000b25 1002
000b26 1002
000b27 e001
000b28 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x12, 0x10, 0x0A, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+00F2
000b29 0000
000b2a e001
000b2b 1002
000b2c 1002
000b2d 100a
000b2e 1012
000b2f e001
000b30 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x0A, 0x10, 0x12, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+00F3
000b31 0000
000b32 e001
000b33 100a
000b34 1012
000b35 1012
000b36 100a
000b37 e001
000b38 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x0A, 0x10, 0x12, 0x10, 0x12, 0x10, 0x0A, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+00F4
000b39 0000
000b3a e009
000b3b 1012
000b3c 1012
000b3d 100a
000b3e 100a
000b3f e011
000b40 0000                      .DB	0x00, 0x00, 0x09, 0xE0, 0x12, 0x10, 0x12, 0x10, 0x0A, 0x10, 0x0A, 0x10, 0x11, 0xE0, 0x00, 0x00	; U+00F5
000b41 0000
000b42 e001
000b43 101a
000b44 1002
000b45 1002
000b46 101a
000b47 e001
000b48 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x1A, 0x10, 0x02, 0x10, 0x02, 0x10, 0x1A, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+00F6
000b49 0000
000b4a 8000
000b4b 8000
000b4c b006
000b4d b006
000b4e 8000
000b4f 8000
000b50 0000                      .DB	0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x06, 0xB0, 0x06, 0xB0, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00	; U+00F7
000b51 0000
000b52 e801
000b53 3002
000b54 5002
000b55 9002
000b56 1003
000b57 e005
000b58 0000                      .DB	0x00, 0x00, 0x01, 0xE8, 0x02, 0x30, 0x02, 0x50, 0x02, 0x90, 0x03, 0x10, 0x05, 0xE0, 0x00, 0x00	; U+00F8
000b59 0000
000b5a e003
000b5b 1010
000b5c 1008
000b5d 1000
000b5e 1000
000b5f f003
000b60 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x10, 0x10, 0x08, 0x10, 0x00, 0x10, 0x00, 0x10, 0x03, 0xF0, 0x00, 0x00	; U+00F9
000b61 0000
000b62 e003
000b63 1000
000b64 1000
000b65 1008
000b66 1010
000b67 f003
000b68 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x08, 0x10, 0x10, 0x10, 0x03, 0xF0, 0x00, 0x00	; U+00FA
000b69 0000
000b6a e003
000b6b 1008
000b6c 1010
000b6d 1010
000b6e 1008
000b6f f003
000b70 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x03, 0xF0, 0x00, 0x00	; U+00FB
000b71 0000
000b72 e003
000b73 1018
000b74 1000
000b75 1000
000b76 1018
000b77 f003
000b78 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x18, 0x10, 0x00, 0x10, 0x00, 0x10, 0x18, 0x10, 0x03, 0xF0, 0x00, 0x00	; U+00FC
000b79 0000
000b7a e003
000b7b 1200
000b7c 1200
000b7d 1208
000b7e 1210
000b7f fc03
000b80 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x00, 0x12, 0x00, 0x12, 0x08, 0x12, 0x10, 0x12, 0x03, 0xFC, 0x00, 0x00	; U+00FD
000b81 0000
000b82 fe1f
000b83 1002
000b84 1002
000b85 1002
000b86 1002
000b87 e001
000b88 0000                      .DB	0x00, 0x00, 0x1F, 0xFE, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+00FE
000b89 0000
000b8a e003
000b8b 1218
000b8c 1200
000b8d 1200
000b8e 1218
000b8f fc03
000b90 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x18, 0x12, 0x00, 0x12, 0x00, 0x12, 0x18, 0x12, 0x03, 0xFC, 0x00, 0x00	; U+00FF
                                 
                                 
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32U4" register use summary:
x  :   7 y  :   3 z  :   7 r0 :  14 r1 :   9 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 183 r17:  37 r18:  12 r19:  12 r20:   3 
r21:  28 r22:  13 r23:  23 r24:   5 r25:   5 r26:  33 r27:  30 r28:  22 
r29:  22 r30:  27 r31:  27 
Registers used: 21 out of 35 (60.0%)

"ATmega32U4" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :   9 adiw  :   5 and   :   0 
andi  :   1 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  17 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   4 brlt  :   0 brmi  :   0 
brne  :  19 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   1 cbi   :  18 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  11 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   1 cpc   :   0 
cpi   :  19 cpse  :   0 dec   :  17 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   4 inc   :   3 jmp   :   0 
ld    :   5 ldd   :   0 ldi   : 184 lds   :  11 lpm   :   5 lsl   :   3 
lsr   :  15 mov   :   5 movw  :   1 mul   :   1 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   2 ori   :   0 out   :  16 pop   :  56 
push  :  56 rcall :  76 ret   :  28 reti  :   4 rjmp  :  25 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  26 sbic  :   0 sbis  :   0 
sbiw  :   1 sbr   :   0 sbrc  :   0 sbrs  :   4 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   9 std   :   0 sts   :  30 
sub   :   1 subi  :   1 swap  :   0 tst   :   4 wdr   :   0 
Instructions used: 41 out of 113 (36.3%)

"ATmega32U4" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001722   1480   4288   5768   32768  17.6%
[.dseg] 0x000100 0x0002e5      0    229    229    2560   8.9%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
